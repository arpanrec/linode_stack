---
- name: MinIO KES | Install | Include common crypt mount
  ansible.builtin.include_tasks:
      file: tasks/common/crypt_mount.yml
  vars:
      cs_crypt_mount_vault_id: "{{ cs_minio_kes_external_disk_id }}"
      cs_crypt_machine_cluster: "{{ cs_minio_kes_cluster_name }}"

- name: MinIO KES | Install | Gather Facts
  ansible.builtin.setup:

- name: MinIO KES | Install | Create group
  ansible.builtin.group:
      name: "{{ cs_minio_kes_group_name }}"
      state: present
      system: true
  register: minio_kes_tmp_group_creation

- name: MinIO KES | Install | Create User
  ansible.builtin.user:
      name: "{{ cs_minio_kes_user_name }}"
      group: "{{ cs_minio_kes_group_name }}"
      state: present
      create_home: false
      system: true
      shell: /bin/false
  register: minio_kes_tmp_user_creation

- name: MinIO KES | Install | Create Directory
  ansible.builtin.file:
      name: "{{ item }}"
      owner: "{{ cs_minio_kes_user_name }}"
      group: "{{ cs_minio_kes_group_name }}"
      mode: "0750"
      state: directory
  with_items:
      - "{{ cs_minio_kes_working_dir }}"
      - "{{ cs_minio_kes_cert_dir }}"
      - "{{ cs_minio_kes_data_dir }}"
      - "{{ cs_minio_kes_cert_file | dirname }}"
      - "{{ cs_minio_kes_cert_key_file | dirname }}"
      - "{{ cs_minio_kes_cert_id_file | dirname }}"
      - "{{ cs_minio_kes_config_file | dirname }}"

- name: MinIO KES | Install | Create group
  ansible.builtin.group:
      name: "{{ cs_minio_kes_group_name }}"
      state: present
      system: true
  register: minio_kes_tmp_group_creation

- name: MinIO KES | Install | Create User
  ansible.builtin.user:
      name: "{{ cs_minio_kes_user_name }}"
      group: "{{ cs_minio_kes_group_name }}"
      state: present
      create_home: false
      system: true
      shell: /bin/false
  register: minio_kes_tmp_user_creation

- name: MinIO KES | Install | Download binary
  ansible.builtin.get_url:
      dest: "/usr/local/bin/kes"
      mode: "0755"
      owner: root
      group: root
      checksum: "sha256:{{ cs_minio_kes_bin_info_map[ansible_architecture]['sha256sum'][cs_minio_kes_version] }}"
      url: "https://github.com/minio/kes/releases/download/{{ cs_minio_kes_version }}/kes-linux\
          -{{ cs_minio_kes_bin_info_map[ansible_architecture]['cs_minio_kes_arch'] }}"

- name: MinIO KES | Install | Write server private key
  community.crypto.openssl_privatekey:
      path: "{{ cs_minio_kes_cert_key_file }}"
      type: RSA
      size: 4096
      mode: "0640"
      owner: "{{ cs_minio_kes_user_name }}"
      group: "{{ cs_minio_kes_group_name }}"

- name: MinIO KES | Install | Write server CSR
  community.crypto.openssl_csr:
      path: "{{ cs_minio_kes_cert_key_file }}.csr"
      privatekey_path: "{{ cs_minio_kes_cert_key_file }}"
      common_name: "{{ inventory_hostname }}"
      basic_constraints: CA:FALSE
      basic_constraints_critical: true
      key_usage:
          - digitalSignature
          - keyEncipherment
      extended_key_usage:
          - serverAuth
      subject_alt_name: "{{ ansible_all_ipv4_addresses | map('regex_replace', '^(.*)$', 'IP:\\1') | list
          + ['DNS:' + ansible_hostname, 'DNS:' + ansible_fqdn, 'DNS:' + inventory_hostname] }}"
      subject_alt_name_critical: true
      mode: "0640"
      owner: "{{ cs_minio_kes_user_name }}"
      group: "{{ cs_minio_kes_group_name }}"

- name: MinIO KES | Install | Write server Certificate
  community.crypto.x509_certificate:
      path: "{{ cs_minio_kes_cert_file }}"
      csr_path: "{{ cs_minio_kes_cert_key_file }}.csr"
      ownca_content: "{{ root_ca_cert_pem }}"
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_password }}"
      provider: ownca
      mode: "0640"
      owner: "{{ cs_minio_kes_user_name }}"
      group: "{{ cs_minio_kes_group_name }}"

- name: MinIO KES | Install | Write server certificate chain
  ansible.builtin.copy:
      content: "{{ root_ca_cert_pem }}"
      dest: "{{ cs_minio_kes_cert_ca }}"
      mode: "0640"
      owner: "{{ cs_minio_kes_user_name }}"
      group: "{{ cs_minio_kes_group_name }}"

- name: MinIO KES | Install | Admin Client Certificate | Get private key
  community.crypto.openssl_privatekey_pipe:
      type: RSA
      size: 4096
  register: __minio_kes_tmp_admin_client_cert_key

- name: MinIO KES | Install | Admin Client Certificate | Get CSR
  community.crypto.openssl_csr_pipe:
      privatekey_content: "{{ __minio_kes_tmp_admin_client_cert_key.privatekey }}"
      common_name: "{{ inventory_hostname }}"
      basic_constraints: CA:FALSE
      basic_constraints_critical: true
      key_usage:
          - digitalSignature
          - keyEncipherment
      extended_key_usage:
          - clientAuth
      subject_alt_name: "{{ ansible_all_ipv4_addresses | map('regex_replace', '^(.*)$', 'IP:\\1') | list
          + ['DNS:' + ansible_hostname, 'DNS:' + ansible_fqdn, 'DNS:' + inventory_hostname] }}"
      subject_alt_name_critical: true
  register: __minio_kes_tmp_admin_client_cert_csr

- name: MinIO KES | Install | Admin Client Certificate | Write server Certificate
  community.crypto.x509_certificate_pipe:
      csr_content: "{{ __minio_kes_tmp_admin_client_cert_csr.csr }}"
      ownca_content: "{{ root_ca_cert_pem }}"
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_password }}"
      provider: ownca
  register: __minio_kes_tmp_admin_client_cert

- name: MinIO KES | Install | Create a tmp file for Admin Client Certificate
  ansible.builtin.tempfile:
      state: file
  register: kes_tmp_admin_client_cert_tmp_file

- name: MinIO KES | Install | Write Admin Client Certificate
  ansible.builtin.copy:
      content: "{{ __minio_kes_tmp_admin_client_cert.certificate }}\n{{ root_ca_cert_pem }}"
      dest: "{{ kes_tmp_admin_client_cert_tmp_file.path }}"
      owner: "{{ cs_minio_kes_user_name }}"
      group: "{{ cs_minio_kes_group_name }}"
      mode: "0600"

- name: MinIO KES | Install | Get Admin Key Id
  ansible.builtin.command:
      cmd: "/usr/local/bin/kes identity of {{ kes_tmp_admin_client_cert_tmp_file.path }}"
  register: minio_kes_tmp_admin_key_id
  changed_when: false

- name: MinIO KES | Install | Remove Temp File
  ansible.builtin.file:
      path: "{{ kes_tmp_admin_client_cert_tmp_file.path }}"
      state: absent

- name: MinIO KES | Install | Write KES Details Vault
  become: false
  delegate_to: localhost
  home_lab_secrets:
      key: "managed-secrets/minio-kes/clusters/{{ cs_minio_kes_cluster_name }}/servers/{{ inventory_hostname }}/config"
      action: write
      value:
          admin_key: "{{ __minio_kes_tmp_admin_client_cert_key.privatekey }}"
          admin_cert: "{{ __minio_kes_tmp_admin_client_cert.certificate }}"
          admin_ca: "{{ root_ca_cert_pem }}"
          "port": "{{ cs_minio_kes_port }}"
          ipv4s: "{{ ansible_all_ipv4_addresses }}"
          hostname: "{{ ansible_hostname }}"
          fqdn: "{{ ansible_fqdn }}"
          version: "{{ cs_minio_kes_version }}"

- name: MinIO KES | Install | Create Config
  ansible.builtin.set_fact:
      minio_kes_config:
          version: v1
          address: "0.0.0.0:{{ cs_minio_kes_port }}"
          tls:
              key: "{{ cs_minio_kes_cert_key_file }}"
              cert: "{{ cs_minio_kes_cert_file }}"
              auth: "on"
              ca: "{{ cs_minio_kes_cert_ca }}"
          admin:
              identity: "{{ minio_kes_tmp_admin_key_id.stdout }}"
          log:
              error: "on"
              audit: "on"
          api:
              "/v1/ready":
                  skip_auth: false
                  timeout: 15s
          policy:
              minio:
                  allow:
                      - /v1/key/create/*
                      - /v1/key/generate/*
                      - /v1/key/decrypt/*
                      - /v1/key/bulk/decrypt
                      - /v1/key/list/*
                      - /v1/status
                      - /v1/metrics
                      - /v1/log/audit
                      - /v1/log/error
          keystore:
              fs:
                  path: "cs_minio_kes_data_dir"

- name: MinIO KES | Install | Write Config
  ansible.builtin.copy:
      content: "---\n{{ minio_kes_config | to_nice_yaml(sort_keys=false) }}"
      dest: "{{ cs_minio_kes_config_file }}"
      owner: "{{ cs_minio_kes_user_name }}"
      group: "{{ cs_minio_kes_group_name }}"
      mode: "0640"

- name: MinIO KES | Install | Create Systemd Service
  ansible.builtin.template:
      src: "templates/minio-kes/{{ cs_minio_kes_systemd_service_name }}.j2"
      dest: "/etc/systemd/system/{{ cs_minio_kes_systemd_service_name }}"
      owner: root
      group: root
      mode: "0644"

- name: MinIO KES | Install | Enable UFW
  community.general.ufw:
      rule: allow
      port: "{{ cs_minio_kes_port }}"
      proto: tcp
      state: enabled
      comment: "Allow KES port, Managed by Ansible home-lab playbook."

- name: MinIO KES | Install | Start Systemd Service
  ansible.builtin.systemd_service:
      name: "{{ cs_minio_kes_systemd_service_name }}"
      state: restarted
      daemon_reload: true
      daemon_reexec: true
      enabled: true
      force: true

- name: MinIO KES | Install | Test | Create a temp file for client certificate
  ansible.builtin.tempfile:
      state: file
  register: __temp_file_client_cert
  with_items:
      - "key"
      - "cert"
      - "ca_chain"

- name: MinIO KES | Install | Test | Write Certificates
  ansible.builtin.copy:
      content: "{{ item.content }}"
      dest: "{{ item.dest }}"
      mode: "0600"
  loop:
      - content: "{{ __minio_kes_tmp_admin_client_cert.certificate }}"
        dest: "{{ __temp_file_client_cert.results[1].path }}"
      - content: "{{ __minio_kes_tmp_admin_client_cert_key.privatekey }}"
        dest: "{{ __temp_file_client_cert.results[0].path }}"
      - content: "{{ root_ca_cert_pem }}"
        dest: "{{ __temp_file_client_cert.results[2].path }}"

- name: MinIO KES | Install | Test | Wait for service to start
  ansible.builtin.uri:
      url: "https://{{ ansible_fqdn }}:{{ cs_minio_kes_port }}/v1/status"
      ca_path: "{{ __temp_file_client_cert.results[2].path }}"
      client_cert: "{{ __temp_file_client_cert.results[1].path }}"
      client_key: "{{ __temp_file_client_cert.results[0].path }}"
      validate_certs: true
      status_code: 200
      timeout: 2
      return_content: false
  register: __kes_ready
  until: __kes_ready.status == 200
  retries: 10
  delay: 2

- name: MinIO KES | Install | Test | Remove temporary certificates
  ansible.builtin.file:
      path: "{{ item.path }}"
      state: absent
  with_items: "{{ __temp_file_client_cert.results }}"
