---
- name: Jellyfin | Config | Install python3-lxml
  ansible.builtin.apt:
      name:
          - python3-lxml
      state: present

- name: Jellyfin | Config | Configure System
  community.general.xml:
      path: "{{ cs_jellyfin_config_dir }}/system.xml"
      xpath: /ServerConfiguration/{{ item.xpath }}
      value: "{{ item.value }}"
  with_items:
      - xpath: "CachePath"
        value: "{{ cs_jellyfin_cache_dir }}"
      - xpath: "MetadataPath"
        value: "{{ cs_jellyfin_data_dir }}/metadata"
      - xpath: "EnableFolderView"
        value: "true"
      - xpath: "MetadataCountryCode"
        value: "IN"

- name: Jellyfin | Config | Configure Encoding
  community.general.xml:
      path: "{{ cs_jellyfin_config_dir }}/encoding.xml"
      xpath: /EncodingOptions/{{ item.xpath }}
      value: "{{ item.value }}"
  with_items:
      - xpath: "TranscodingTempPath"
        value: "{{ cs_jellyfin_cache_dir }}/transcodes"
  retries: 5
  delay: 5

- name: Jellyfin | Config | Copy xbmcmetadata
  ansible.builtin.copy:
      src: "files/jellyfin/xbmcmetadata.xml"
      dest: "{{ cs_jellyfin_config_dir }}/xbmcmetadata.xml"
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      mode: "0750"

- name: Jellyfin | Config | Copy branding
  ansible.builtin.copy:
      src: "files/jellyfin/branding.xml"
      dest: "{{ cs_jellyfin_config_dir }}/branding.xml"
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      mode: "0750"

- name: Jellyfin | Config | Check if network.xml exists
  ansible.builtin.stat:
      path: "{{ cs_jellyfin_config_dir }}/network.xml"
  register: __jellyfin_network_xml_exists

- name: Jellyfin | Config | Enable UFW 8096 when network.xml does not exists
  community.general.ufw:
      state: enabled
      rule: allow
      port: 8096
      proto: tcp
      comment: "Allow Jellyfin HTTP Port, Managed by Ansible home-lab playbook."
  when: not __jellyfin_network_xml_exists.stat.exists

- name: Jellyfin | Config | Fail if network.xml does not exist
  no_log: false
  ansible.builtin.fail:
      msg: |+
          Jellyfin network.xml does not exist.
          Do the initial setup manually. This will create the network.xml.
          Then re-run the playbook.
  when: not __jellyfin_network_xml_exists.stat.exists

- name: Jellyfin | Config | Enable UFW Firewall
  community.general.ufw:
      rule: allow
      port: "{{ item.port }}"
      proto: tcp
      state: enabled
      comment: "Allow Jellyfin {{ item.comment }}, Managed by Ansible home-lab playbook."
  with_items:
      - port: "{{ cs_jellyfin_internal_http_port }}"
        comment: "Internal HTTP Port"
      - port: "{{ cs_jellyfin_internal_https_port }}"
        comment: "Internal HTTPS Port"
      - port: "{{ cs_jellyfin_public_http_port }}"
        comment: "Public HTTP Port"
      - port: "{{ cs_jellyfin_public_https_port }}"
        comment: "Public HTTPS Port"

- name: Jellyfin | Config | Enable UFW UDP Firewall
  community.general.ufw:
      rule: allow
      port: "{{ item.port }}"
      proto: udp
      state: enabled
      comment: "Allow Jellyfin {{ item.comment }} port, Managed by Ansible home-lab playbook."
  with_items:
      - port: 1900
        comment: "service auto-discovery"
      - port: 7359
        comment: "auto-discovery"

- name: Jellyfin | Config | Get Public Ingress IP and Hostname from vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_kv2_get:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      engine_mount_point: "secret"
      path: "blr-home-lab"
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
  register: __jellyfin_server_public_ingress_secret_dict
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

- name: Jellyfin | Config | Set fact Public Ingress IP and Hostname
  ansible.builtin.set_fact:
      cs_public_ingress_ip: "{{ __jellyfin_server_public_ingress_secret_dict.secret.public_ingress_ip }}"
      cs_public_ingress_dns_entry: "{{ __jellyfin_server_public_ingress_secret_dict.secret.public_ingress_dns_entry }}"

- name: Jellyfin | Config | Get Server Certificates from Vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_write:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: pki/issue/server_certificate
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
      data:
          common_name: "{{ cs_public_ingress_dns_entry }}"
          alt_names: "{{ cs_public_ingress_dns_entry }},localhost,{{ ansible_hostname }},{{ ansible_fqdn }}"
          # Because in the inv plugin ansible host hast to be a ip
          ip_sans: "127.0.0.1,{{ ansible_host }},{{ cs_public_ingress_ip }}"
  register: __jellyfin_server_cert
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

- name: Jellyfin | Config | Create temp files
  ansible.builtin.tempfile:
      state: file
      suffix: ".pem"
  with_items:
      - cert
      - chain
      - issuing_ca
      - key
  register: __jellyfin_temp_files

- name: Jellyfin | Config | Create certificate directory
  ansible.builtin.file:
      path: "{{ cs_jellyfin_config_dir }}/cert"
      state: directory
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      mode: "0750"

- name: Jellyfin | Config | Write Server Certificate to temp files
  ansible.builtin.copy:
      content: "{{ item.content }}"
      dest: "{{ item.dest }}"
      mode: "0750"
  loop:
      - content: "{{ __jellyfin_server_cert.data.data.certificate }}\n\
            {{ __jellyfin_server_cert.data.data.ca_chain | join('\n') }}"
        dest: "{{ __jellyfin_temp_files.results[0].path }}"
      - content: "{{ __jellyfin_server_cert.data.data.ca_chain | join('\n') }}"
        dest: "{{ __jellyfin_temp_files.results[1].path }}"
      - content: "{{ __jellyfin_server_cert.data.data.issuing_ca }}"
        dest: "{{ __jellyfin_temp_files.results[2].path }}"
      - content: "{{ __jellyfin_server_cert.data.data.private_key }}"
        dest: "{{ __jellyfin_temp_files.results[3].path }}"

- name: Jellyfin | Config | Set random password
  ansible.builtin.set_fact:
      cs_jellyfin_p12_cert_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=40,
          chars=['ascii_letters', 'digits']) }}"

# Certificate is not working, for some reason ca_chain is not being added to the certificate
- name: Jellyfin | Config | Generate PKCS#12 file
  changed_when: true
  become: true
  become_user: root
  ansible.builtin.shell:
      cmd: |+
          openssl pkcs12 -export -out {{ cs_jellyfin_config_dir }}/cert/jellyfin.pfx \
              -inkey {{ __jellyfin_temp_files.results[3].path }} \
              -in "{{ __jellyfin_temp_files.results[0].path }}" \
              -certfile "{{ __jellyfin_temp_files.results[2].path }}" \
              -password "pass:{{ cs_jellyfin_p12_cert_password }}"

          chmod 0640 {{ cs_jellyfin_config_dir }}/cert/jellyfin.pfx
          chown {{ cs_jellyfin_user_name }}:{{ cs_jellyfin_group_name }} \
              {{ cs_jellyfin_config_dir }}/cert/jellyfin.pfx

# - name: Jellyfin | Config | Generate PKCS#12 file
#   community.crypto.openssl_pkcs12:
#       action: export
#       path: {{ cs_jellyfin_config_dir }}/cert/jellyfin.pfx
#       mode: "0777"
#       owner: "{{ cs_jellyfin_user_name }}"
#       group: "{{ cs_jellyfin_group_name }}"
#       friendly_name: raclette
#       encryption_level: auto
#       privatekey_content: "{{ __jellyfin_server_cert.data.data.private_key }}"
#       certificate_path: "{{ __jellyfin_temp_files.results[0].path }}"
#       other_certificates_parse_all: false
#       passphrase: "{{ cs_jellyfin_p12_cert_password }}"
#       other_certificates:
#           - "{{ __jellyfin_temp_files.results[2].path }}"
#           - "{{ __jellyfin_temp_files.results[1].path }}"
#           - "{{ __jellyfin_temp_files.results[0].path }}"
#       state: present

- name: Jellyfin | Config | Configure Network Ports
  community.general.xml:
      path: "{{ cs_jellyfin_config_dir }}/network.xml"
      xpath: /NetworkConfiguration/{{ item.xpath }}
      value: "{{ item.value }}"
  with_items:
      - xpath: "PublicHttpPort"
        value: "{{ cs_jellyfin_public_http_port }}"
      - xpath: "PublicHttpsPort"
        value: "{{ cs_jellyfin_public_https_port }}"
      - xpath: "InternalHttpPort"
        value: "{{ cs_jellyfin_internal_http_port }}"
      - xpath: "InternalHttpsPort"
        value: "{{ cs_jellyfin_internal_https_port }}"
      - xpath: "EnableRemoteAccess"
        value: "true"
      - xpath: "EnableHttps"
        value: "true"
      - xpath: "RequireHttps"
        value: "false"
      - xpath: "CertificatePath"
        value: "{{ cs_jellyfin_config_dir }}/cert/jellyfin.pfx"
      - xpath: "CertificatePassword"
        value: "{{ cs_jellyfin_p12_cert_password }}"
      - xpath: "AutoDiscovery"
        value: "true"
      - xpath: "EnableUPnP"
        value: "true"
      - xpath: "EnableIPv4"
        value: "true"
      - xpath: "EnableIPv6"
        value: "false"
      - xpath: "EnableRemoteAccess"
        value: "true"
      - xpath: "IgnoreVirtualInterfaces"
        value: "true"

- name: Jellyfin | Config | Fix Permissions
  ansible.builtin.shell:
      cmd: |+
          chown -R {{ cs_jellyfin_user_name }}:{{ cs_jellyfin_group_name }} {{ item }};
          find {{ item }} -type d -exec chmod 0750 {} \;
          find {{ item }} -type f -exec chmod 0750 {} \;
  changed_when: true
  with_items:
      - "{{ cs_jellyfin_media_dir }}"
      - "{{ cs_jellyfin_data_dir }}"
      - "{{ cs_jellyfin_config_dir }}"
      - "{{ cs_jellyfin_log_dir }}"
      - "{{ cs_jellyfin_cache_dir }}"
