---
- name: "Nginx Proxy Manager | Add Proxy Hosts | Create private key | {{ cs_nginx_proxy_host.domains[0] }}"
  community.crypto.openssl_privatekey_pipe:
      type: RSA
      size: 4096
  register: __nginx_proxy_manager_private_key

- name: "Nginx Proxy Manager | Add Proxy Hosts | Create CSR | {{ cs_nginx_proxy_host.domains[0] }}"
  community.crypto.openssl_csr_pipe:
      privatekey_content: "{{ __nginx_proxy_manager_private_key.privatekey }}"
      common_name: "{{ cs_nginx_proxy_host.domains[0] }}"
      basic_constraints: CA:FALSE
      basic_constraints_critical: true
      key_usage:
          - digitalSignature
          - keyEncipherment
      extended_key_usage:
          - serverAuth
      subject_alt_name: "{{ cs_nginx_proxy_host.domains | map('regex_replace', '^(.*)$', 'DNS:\\1') | list }}"
      subject_alt_name_critical: true
  register: __nginx_proxy_manager_csr

- name: "Nginx Proxy Manager | Add Proxy Hosts | Create Certificate | {{ cs_nginx_proxy_host.domains[0] }}"
  community.crypto.x509_certificate_pipe:
      csr_content: "{{ __nginx_proxy_manager_csr.csr }}"
      ownca_content: "{{ root_ca_cert_pem }}"
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_password }}"
      provider: ownca
  register: __nginx_proxy_manager_certificate

- name: "Nginx Proxy Manager | Add Proxy Hosts | Validate Certificates | {{ cs_nginx_proxy_host.domains[0] }}"
  ansible.builtin.uri:
      url: "{{ cs_npm_api_endpoint }}/nginx/certificates/validate"
      headers:
          Authorization: "Bearer {{ _response_bearer_token.json.token }}"
          Accept': "application/json"
      method: POST
      body_format: form-multipart
      status_code:
          - 200
      body:
          certificate_key:
              content: "{{ __nginx_proxy_manager_private_key.privatekey }}"
              mime_type: "text/plain"
              filename: certificate_key.pem
          certificate:
              content: "{{ __nginx_proxy_manager_certificate.certificate }}"
              mime_type: "text/plain"
              filename: certificate.pem
          intermediate_certificate:
              content: "{{ root_ca_cert_pem }}"
              mime_type: "text/plain"
              filename: intermediate_certificate.pem
  register: _response_server_certificates_validate
  changed_when: false

- name: "Nginx Proxy Manager | Add Proxy Hosts | Validate Certificates Debug | {{ cs_nginx_proxy_host.domains[0] }}"
  ansible.builtin.debug:
      msg: "{{ _response_server_certificates_validate.json }}"

- name: Nginx Proxy Manager | Add Proxy Hosts | Create Server Certificates | {{ cs_nginx_proxy_host.domains[0] }}
  ansible.builtin.uri:
      url: "{{ cs_npm_api_endpoint }}/nginx/certificates"
      headers:
          Authorization: "Bearer {{ _response_bearer_token.json.token }}"
      method: POST
      body_format: json
      status_code:
          - 201
      body:
          provider: other
          nice_name: "{{ cs_nginx_proxy_host.domains[0] }}"
          domain_names: "{{ cs_nginx_proxy_host.domains }}"
  register: _response_server_certificates_create
  changed_when: true

- name: "Nginx Proxy Manager | Add Proxy Hosts | Upload Certificates | {{ cs_nginx_proxy_host.domains[0] }}"
  ansible.builtin.uri:
      url: "{{ cs_npm_api_endpoint }}/nginx/certificates/{{ _response_server_certificates_create.json.id }}/upload"
      headers:
          Authorization: "Bearer {{ _response_bearer_token.json.token }}"
          Accept': "application/json"
      method: POST
      body_format: form-multipart
      status_code:
          - 200
      body:
          certificate_key:
              content: "{{ __nginx_proxy_manager_private_key.privatekey }}"
              mime_type: "text/plain"
              filename: certificate_key.pem
          certificate:
              content: "{{ __nginx_proxy_manager_certificate.certificate }}"
              mime_type: "text/plain"
              filename: certificate.pem
          intermediate_certificate:
              content: "{{ root_ca_cert_pem }}"
              mime_type: "text/plain"
              filename: intermediate_certificate.pem

- name: "Nginx Proxy Manager | Add Proxy Hosts | Create Proxy Host | {{ cs_nginx_proxy_host.domains[0] }}"
  ansible.builtin.uri:
      url: "{{ cs_npm_api_endpoint }}/nginx/proxy-hosts"
      headers:
          Authorization: "Bearer {{ _response_bearer_token.json.token }}"
          Accept': "application/json"
      method: POST
      body_format: json
      status_code:
          - 201
      body:
          domain_names: "{{ cs_nginx_proxy_host.domains }}"
          certificate_id: "{{ _response_server_certificates_create.json.id }}"
          forward_scheme: "{{ cs_nginx_proxy_host.forward_scheme }}"
          forward_host: "{{ cs_nginx_proxy_host.forward_host }}"
          forward_port: "{{ cs_nginx_proxy_host.forward_port }}"
          ssl_forced: "{{ cs_nginx_proxy_host.ssl_forced | default(true) }}"
          block_exploits: "{{ cs_nginx_proxy_host.block_exploits | default(true) }}"
          http2_support: "{{ cs_nginx_proxy_host.http2_support | default(true) }}"
          hsts_enabled: "{{ cs_nginx_proxy_host.hsts_enabled | default(true) }}"
          hsts_subdomains: "{{ cs_nginx_proxy_host.hsts_subdomains | default(false) }}"
          caching_enabled: "{{ cs_nginx_proxy_host.caching_enabled | default(true) }}"
          advanced_config: "{{ cs_nginx_proxy_host.advanced_config | default('') }}"
          allow_websocket_upgrade: "{{ cs_nginx_proxy_host.allow_websocket_upgrade | default(false) }}"
          enabled: "{{ cs_nginx_proxy_host.enabled | default(true) }}"
  register: _response_proxy_host_create

- name: "Nginx Proxy Manager | Add Proxy Hosts | Create Proxy Host Debug | {{ cs_nginx_proxy_host.domains[0] }}"
  ansible.builtin.debug:
      msg: "{{ _response_proxy_host_create.json }}"

- name: "Nginx Proxy Manager | Add Proxy Hosts | Update Proxy Host | {{ cs_nginx_proxy_host.domains[0] }}"
  when: cs_nginx_proxy_host.ssl_verify_client | default(true)
  ansible.builtin.uri:
      url: "{{ cs_npm_api_endpoint }}/nginx/proxy-hosts/{{ _response_proxy_host_create.json.id }}"
      headers:
          Authorization: "Bearer {{ _response_bearer_token.json.token }}"
          Accept': "application/json"
      method: PUT
      body_format: json
      status_code:
          - 200
      body:
          advanced_config: |-
              {{ cs_nginx_proxy_host.advanced_config | default('') }}
              ssl_verify_client on;
              ssl_client_certificate /etc/ssl/certs/CAs.pem;
