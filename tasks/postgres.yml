---
- name: Database | Postgres | Gather Facts
  ansible.builtin.setup:

- name: Database | Postgres | Get config from Vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_kv2_get:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: "blr-home-lab/{{ inventory_hostname }}/postgresql"
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
      engine_mount_point: "secret"
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"
  register: __postgresql_config

- name: Database | Postgres | Set config facts
  ansible.builtin.set_fact:
      cs_postgres_port: "{{ __postgresql_config.secret.port }}"
      cs_postgres_maintenance_db: "{{ __postgresql_config.secret.maintenance_db }}"
      cs_postgres_apps_dict: "{{ __postgresql_config.secret.apps_dict }}"

- name: Database | Postgres | Enable Docker
  ansible.builtin.systemd_service:
      name: docker
      enabled: true
      state: started

- name: Database | Postgres | Enable UFW Port
  community.general.ufw:
      rule: allow
      port: "{{ cs_postgres_port }}"
      proto: tcp
      state: enabled
      comment: "Allow Postgres port, Managed by Ansible home-lab playbook."

- name: Database | Postgres | Install python3-psycopg2
  ansible.builtin.apt:
      name: python3-psycopg2

- name: Database | Postgres | Stop old containers
  community.docker.docker_container:
      name: "{{ item }}"
      state: absent
      force_kill: true
  with_items:
      - "{{ cs_postgres_container_name }}"

- name: Database | Postgres | Create network
  community.docker.docker_network:
      name: "{{ cs_postgres_network_name }}"
      state: present

- name: Database | Postgres | Create data directory
  ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      mode: "0700"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
  with_items:
      - "{{ cs_postgres_dir }}"
      - "{{ cs_postgres_data_dir }}"
      - "{{ cs_postgres_certs_dir }}"

- name: Database | Postgres | Get Server Certificates from Vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_write:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: pki/issue/server_certificate
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
      data:
          common_name: "{{ inventory_hostname }}"
          alt_names: "{{ cs_postgres_host_public_domain }},{{ cs_postgres_host_private_domain }},\
              {{ cs_postgres_container_name }},localhost"
          ip_sans: "{{ ([cs_postgres_host_public_ip, cs_postgres_host_private_ip, '127.0.0.1']
              + ansible_all_ipv4_addresses) | join(',') }}"
  register: __postgresql_server_cert
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

- name: Database | Postgres | Write Server Certificate
  ansible.builtin.copy:
      content: "{{ item.content }}"
      dest: "{{ item.dest }}"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      mode: "0600"
  loop:
      - content: "{{ __postgresql_server_cert.data.data.certificate }}\n\
            {{ __postgresql_server_cert.data.data.ca_chain | join('\n') }}"
        dest: "{{ cs_postgres_certs_cert_file }}"
      - content: "{{ __postgresql_server_cert.data.data.private_key }}"
        dest: "{{ cs_postgres_certs_privkey_file }}"
      - content: "{{ __postgresql_server_cert.data.data.ca_chain | join('\n') }}"
        dest: "{{ cs_postgres_certs_chain_file }}"

- name: Database | Postgres | Create pg_hba.conf
  ansible.builtin.copy:
      src: files/db/postgresql/pg_hba.conf
      dest: "{{ cs_postgres_hba_file }}"
      mode: "0644"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      remote_src: false

- name: Database | Postgres | Check if PG_VERSION file exists
  ansible.builtin.stat:
      path: "{{ cs_postgres_data_dir }}/PG_VERSION"
  register: __pg_version_file

- name: Database | Postgres | First Run
  when: not __pg_version_file.stat.exists
  block:
      - name: Database | Postgres | First Run | Create User and Password
        ansible.builtin.set_fact:
            cs_postgres_maintenance_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=40,
                chars=['ascii_letters', 'digits']) }}"
            cs_postgres_maintenance_user: "{{ lookup('community.general.random_string', special=false, length=12) }}"

      - name: Database | Postgres | First Run | Write the Password to Vault
        become: false
        delegate_facts: true
        delegate_to: localhost
        community.hashi_vault.vault_kv2_write:
            url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
            path: "postgresql/clusters/{{ cs_postgres_cluster_name }}/servers/{{ inventory_hostname }}/config"
            token: "{{ vault_ha_client.token }}"
            validate_certs: true
            engine_mount_point: "managed-secrets"
            data:
                maintenance_user: "{{ cs_postgres_maintenance_user }}"
                maintenance_password: "{{ cs_postgres_maintenance_password }}"
                maintenance_db: "{{ cs_postgres_maintenance_db }}"
                private_ip: "{{ cs_postgres_host_private_ip }}"
                public_ip: "{{ cs_postgres_host_public_ip }}"
                public_domain: "{{ cs_postgres_host_public_domain }}"
                private_domain: "{{ cs_postgres_host_private_domain }}"
                server_port: "{{ cs_postgres_port }}"
                server_version: "{{ cs_postgres_version }}"
        environment:
            VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
            VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
            VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

      - name: Database | Postgres | First Run | Start Container
        community.docker.docker_container:
            name: "{{ cs_postgres_container_name }}"
            image: "{{ cs_postgres_docker_image }}:{{ cs_postgres_docker_image_tag }}"
            user: "{{ cs_postgres_run_user }}:{{ cs_postgres_run_group }}"
            auto_remove: true
            networks:
                - name: "{{ cs_postgres_network_name }}"
            volumes:
                - "{{ cs_postgres_data_dir }}:/var/lib/postgresql/data:rw"
                - "{{ cs_postgres_certs_privkey_file }}:/server-privkey.pem:ro"
                - "{{ cs_postgres_certs_cert_file }}:/server-cert.pem:ro"
                - "{{ cs_postgres_certs_chain_file }}:/server-chain.pem:ro"
                - "{{ cs_postgres_hba_file }}:/pg_hba.conf:ro"
            state: started
            command: "--port={{ cs_postgres_port }}
                --ssl=on
                --ssl_cert_file=/server-cert.pem
                --ssl_key_file=/server-privkey.pem
                --ssl_ca_file=/server-chain.pem
                -c hba_file=/pg_hba.conf"
            ports:
                - "{{ cs_postgres_port }}:{{ cs_postgres_port }}"
            env:
                POSTGRES_PASSWORD: "{{ cs_postgres_maintenance_password }}"
                POSTGRES_USER: "{{ cs_postgres_maintenance_user }}"
                POSTGRES_DB: "{{ cs_postgres_maintenance_db }}"
                TZ: Asia/Kolkata

      - name: Database | Postgres | First Run | Get Client Certificates from Vault
        become: false
        delegate_facts: true
        delegate_to: localhost
        community.hashi_vault.vault_write:
            url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
            path: pki/issue/client_certificate
            token: "{{ vault_ha_client.token }}"
            validate_certs: true
            data:
                common_name: "{{ cs_postgres_maintenance_user }}"
                alt_names: "{{ cs_postgres_host_public_domain }},{{ cs_postgres_host_private_domain }},\
                    {{ cs_postgres_container_name }},localhost,{{ cs_postgres_maintenance_user }}"
                ip_sans: "{{ cs_postgres_host_public_ip }},{{ cs_postgres_host_private_ip }},127.0.0.1"
        register: __postgresql_first_run_client_cert
        environment:
            VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
            VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
            VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

      - name: Database | Postgres | First Run | Create Client Certificates temp files
        ansible.builtin.tempfile:
            state: file
        register: __temp_file_first_run_client_cert
        with_items:
            - "key"
            - "cert"
            - "ca_chain"

      - name: Database | Postgres | First Run | Write Client Certificate
        ansible.builtin.copy:
            content: "{{ item.content }}"
            dest: "{{ item.dest }}"
            owner: "{{ cs_postgres_run_user }}"
            group: "{{ cs_postgres_run_group }}"
            mode: "0600"
        loop:
            - content: "{{ __postgresql_first_run_client_cert.data.data.certificate }}\n\
                  {{ __postgresql_first_run_client_cert.data.data.ca_chain | join('\n') }}"
              dest: "{{ __temp_file_first_run_client_cert.results[1].path }}"
            - content: "{{ __postgresql_first_run_client_cert.data.data.private_key }}"
              dest: "{{ __temp_file_first_run_client_cert.results[0].path }}"
            - content: "{{ __postgresql_first_run_client_cert.data.data.ca_chain | join('\n') }}"
              dest: "{{ __temp_file_first_run_client_cert.results[2].path }}"

      - name: Database | Postgres | First Run | Wait for service to start
        community.postgresql.postgresql_ping:
            login_host: "{{ cs_postgres_host_private_ip }}"
            login_password: "{{ cs_postgres_maintenance_password }}"
            login_user: "{{ cs_postgres_maintenance_user }}"
            login_port: "{{ cs_postgres_port }}"
            login_db: "{{ cs_postgres_maintenance_db }}"
            ssl_mode: verify-full
            ssl_rootcert: "{{ __temp_file_first_run_client_cert.results[2].path }}"
            ssl_cert: "{{ __temp_file_first_run_client_cert.results[1].path }}"
            ssl_key: "{{ __temp_file_first_run_client_cert.results[0].path }}"
        register: is_postgres_up
        until: is_postgres_up.is_available
        retries: 30
        delay: 3

      - name: Database | Postgres | First Run | Remove temporary certificates
        ansible.builtin.file:
            path: "{{ item.path }}"
            state: absent
        with_items: "{{ __temp_file_first_run_client_cert.results }}"

      - name: Database | Postgres | First Run | Remove container
        community.docker.docker_container:
            name: "{{ cs_postgres_container_name }}"
            state: absent
            force_kill: true

- name: Database | Postgres | Get credentials from Vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_kv2_get:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: "postgresql/clusters/{{ cs_postgres_cluster_name }}/servers/{{ inventory_hostname }}/config"
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
      engine_mount_point: "managed-secrets"
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"
  register: __postgresql_secrets

- name: Database | Postgres | Create User and Password
  ansible.builtin.set_fact:
      cs_postgres_maintenance_password: "{{ __postgresql_secrets.secret.maintenance_password }}"
      cs_postgres_maintenance_user: "{{ __postgresql_secrets.secret.maintenance_user }}"

- name: Database | Postgres | Start Container
  community.docker.docker_container:
      name: "{{ cs_postgres_container_name }}"
      image: "{{ cs_postgres_docker_image }}:{{ cs_postgres_docker_image_tag }}"
      user: "{{ cs_postgres_run_user }}:{{ cs_postgres_run_group }}"
      restart_policy: unless-stopped
      networks:
          - name: "{{ cs_postgres_network_name }}"
      volumes:
          - "{{ cs_postgres_data_dir }}:/var/lib/postgresql/data"
          - "{{ cs_postgres_certs_privkey_file }}:/server-privkey.pem:ro"
          - "{{ cs_postgres_certs_cert_file }}:/server-cert.pem:ro"
          - "{{ cs_postgres_certs_chain_file }}:/server-chain.pem:ro"
          - "{{ cs_postgres_hba_file }}:/pg_hba.conf:ro"
      state: started
      restart: true
      command: "--port={{ cs_postgres_port }}
          --ssl=on
          --ssl_cert_file=/server-cert.pem
          --ssl_key_file=/server-privkey.pem
          --ssl_ca_file=/server-chain.pem
          -c hba_file=/pg_hba.conf"
      ports:
          - "{{ cs_postgres_port }}:{{ cs_postgres_port }}"
      env:
          TZ: Asia/Kolkata

- name: Database | Postgres | Get Client Certificates from Vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_write:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: pki/issue/client_certificate
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
      data:
          common_name: "{{ cs_postgres_maintenance_user }}"
          alt_names: "{{ cs_postgres_host_public_domain }},{{ cs_postgres_host_private_domain }},\
              {{ cs_postgres_container_name }},localhost,{{ cs_postgres_maintenance_user }}"
          ip_sans: "{{ cs_postgres_host_public_ip }},{{ cs_postgres_host_private_ip }},127.0.0.1"
  register: __postgresql_client_cert
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

- name: Database | Postgres | Create Client Certificates temp files
  ansible.builtin.tempfile:
      state: file
  register: __temp_file_client_cert
  with_items:
      - "key"
      - "cert"
      - "ca_chain"

- name: Database | Postgres | Write Client Certificate
  ansible.builtin.copy:
      content: "{{ item.content }}"
      dest: "{{ item.dest }}"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      mode: "0600"
  loop:
      - content: "{{ __postgresql_client_cert.data.data.certificate }}\n\
            {{ __postgresql_client_cert.data.data.ca_chain | join('\n') }}"
        dest: "{{ __temp_file_client_cert.results[1].path }}"
      - content: "{{ __postgresql_client_cert.data.data.private_key }}"
        dest: "{{ __temp_file_client_cert.results[0].path }}"
      - content: "{{ __postgresql_client_cert.data.data.ca_chain | join('\n') }}"
        dest: "{{ __temp_file_client_cert.results[2].path }}"

- name: Database | Postgres | Wait for service to start
  community.postgresql.postgresql_ping:
      login_host: "{{ cs_postgres_host_private_ip }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      login_db: "{{ cs_postgres_maintenance_db }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  register: is_postgres_up
  until: is_postgres_up.is_available
  retries: 30
  delay: 3

- name: Database | Postgres | Generate random user and password
  ansible.builtin.set_fact:
      password: "{{ lookup('ansible.builtin.password', '/dev/null', length=40,
          chars=['ascii_letters', 'digits']) }}"
  register: __random_user_password
  with_items: "{{ cs_postgres_apps_dict | dict2items }}"

- name: Database | Postgres | Create Database users and passwords in Vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_kv2_write:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: "postgresql/clusters/{{ cs_postgres_cluster_name }}/servers/{{ inventory_hostname }}/db/{{ item.item.key }}"
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
      engine_mount_point: "managed-secrets"
      data:
          user: "{{ item.item.value.user }}"
          password: "{{ item.ansible_facts.password }}"
          maintenance_db: "{{ cs_postgres_maintenance_db }}"
          private_ip: "{{ cs_postgres_host_private_ip }}"
          public_ip: "{{ cs_postgres_host_public_ip }}"
          public_domain: "{{ cs_postgres_host_public_domain }}"
          private_domain: "{{ cs_postgres_host_private_domain }}"
          server_port: "{{ cs_postgres_port }}"
          server_version: "{{ cs_postgres_version }}"
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Write the Password to Vault again for the maintenance user
      in case some some connection properties changes
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_kv2_write:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: "postgresql/clusters/{{ cs_postgres_cluster_name }}/servers/{{ inventory_hostname }}/config"
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
      engine_mount_point: "managed-secrets"
      data:
          maintenance_user: "{{ cs_postgres_maintenance_user }}"
          maintenance_password: "{{ cs_postgres_maintenance_password }}"
          maintenance_db: "{{ cs_postgres_maintenance_db }}"
          private_ip: "{{ cs_postgres_host_private_ip }}"
          public_ip: "{{ cs_postgres_host_public_ip }}"
          public_domain: "{{ cs_postgres_host_public_domain }}"
          private_domain: "{{ cs_postgres_host_private_domain }}"
          server_port: "{{ cs_postgres_port }}"
          server_version: "{{ cs_postgres_version }}"
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

- name: Database | Postgres | Update maintenance user password
  community.postgresql.postgresql_user:
      name: "{{ cs_postgres_maintenance_user }}"
      password: "{{ cs_postgres_maintenance_password }}"
      comment: "Postgres maintenance user,
          Managed by Ansible home-lab playbook {{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"
      state: "present"
      login_host: "{{ cs_postgres_host_private_ip }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      login_db: "{{ cs_postgres_maintenance_db }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"

- name: Database | Postgres | Update maintenance database
  community.postgresql.postgresql_db:
      name: "{{ cs_postgres_maintenance_db }}"
      owner: "{{ cs_postgres_maintenance_user }}"
      state: "present"
      comment: "Postgres maintenance database,
          Managed by Ansible home-lab playbook {{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"
      maintenance_db: "{{ cs_postgres_maintenance_db }}"
      login_host: "{{ cs_postgres_host_private_ip }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"

- name: Database | Postgres | Create users
  community.postgresql.postgresql_user:
      name: "{{ item.item.value.user }}"
      password: "{{ item.ansible_facts.password }}"
      state: "present"
      login_host: "{{ cs_postgres_host_private_ip }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      login_db: "{{ cs_postgres_maintenance_db }}"
      ssl_mode: verify-full
      comment: "User for {{ item.item.key }},
          Managed by Ansible home-lab playbook {{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Create databases
  community.postgresql.postgresql_db:
      name: "{{ item.item.key }}"
      owner: "{{ item.item.value.user }}"
      state: "present"
      encoding: "UTF8"
      template: "template0"
      comment: "Database for {{ item.item.key }}, Owned by {{ item.item.value.user }},
          Managed by Ansible home-lab playbook {{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"
      maintenance_db: "{{ cs_postgres_maintenance_db }}"
      login_host: "{{ cs_postgres_host_private_ip }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Grant privileges table
  community.postgresql.postgresql_privs:
      type: "table"
      database: "{{ item.item.key }}"
      obj: "ALL_IN_SCHEMA"
      role: "{{ item.item.value.user }}"
      privs: "ALL"
      admin_option: "true"
      login_host: "{{ cs_postgres_host_private_ip }}"
      #   login_db: "{{ cs_postgres_maintenance_db }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Grant privileges sequence
  community.postgresql.postgresql_privs:
      type: "sequence"
      database: "{{ item.item.key }}"
      obj: "ALL_IN_SCHEMA"
      role: "{{ item.item.value.user }}"
      privs: "ALL"
      admin_option: "true"
      login_host: "{{ cs_postgres_host_private_ip }}"
      #   login_db: "{{ cs_postgres_maintenance_db }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Grant privileges function
  community.postgresql.postgresql_privs:
      type: "function"
      database: "{{ item.item.key }}"
      obj: "ALL_IN_SCHEMA"
      role: "{{ item.item.value.user }}"
      privs: "ALL"
      admin_option: "true"
      login_host: "{{ cs_postgres_host_private_ip }}"
      #   login_db: "{{ cs_postgres_maintenance_db }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Grant privileges procedure
  community.postgresql.postgresql_privs:
      type: "procedure"
      database: "{{ item.item.key }}"
      obj: "ALL_IN_SCHEMA"
      role: "{{ item.item.value.user }}"
      privs: "ALL"
      admin_option: "true"
      login_host: "{{ cs_postgres_host_private_ip }}"
      #   login_db: "{{ cs_postgres_maintenance_db }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Change owner of databases
  community.postgresql.postgresql_owner:
      obj_type: "database"
      obj_name: "{{ item.item.key }}"
      new_owner: "{{ item.item.value.user }}"
      login_host: "{{ cs_postgres_host_private_ip }}"
      login_db: "{{ cs_postgres_maintenance_db }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Remove temporary certificates
  ansible.builtin.file:
      path: "{{ item.path }}"
      state: absent
  with_items: "{{ __temp_file_client_cert.results }}"
