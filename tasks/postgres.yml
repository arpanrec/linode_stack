---
- name: Database | Postgres | Gather Facts
  ansible.builtin.setup:

- name: Database | Postgres | Set config facts
  ansible.builtin.set_fact:
      cs_postgres_port: "{{ __postgresql_config.port }}"
      cs_postgres_maintenance_db: "{{ __postgresql_config.maintenance_db }}"
      cs_postgres_apps_dict: "{{ __postgresql_config.apps_dict }}"
  vars:
      __postgresql_config: "{{ lookup('home_lab_secrets', 'secret/' + cs_postgres_cluster_name + '/'
          + inventory_hostname + '/postgresql') }}"

- name: Database | Postgres | Enable Docker
  ansible.builtin.systemd_service:
      name: docker
      enabled: true
      state: started

- name: Database | Postgres | Enable UFW Port
  community.general.ufw:
      rule: allow
      port: "{{ cs_postgres_port }}"
      proto: tcp
      state: enabled
      comment: "Allow Postgres port, Managed by Ansible home-lab playbook."

- name: Database | Postgres | Install python3-psycopg2
  ansible.builtin.apt:
      name: python3-psycopg2

- name: Database | Postgres | Stop old containers
  community.docker.docker_container:
      name: "{{ item }}"
      state: absent
      force_kill: true
  with_items:
      - "{{ cs_postgres_container_name }}"

- name: Database | Postgres | Create network
  community.docker.docker_network:
      name: "{{ cs_postgres_network_name }}"
      state: present

- name: Database | Postgres | Create data directory
  ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      mode: "0700"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
  with_items:
      - "{{ cs_postgres_dir }}"
      - "{{ cs_postgres_data_dir }}"
      - "{{ cs_postgres_certs_dir }}"

- name: Database | Postgres | Write private key
  community.crypto.openssl_privatekey:
      path: "{{ cs_postgres_certs_privkey_file }}"
      type: RSA
      size: 4096
      backup: false
      mode: "0o600"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"

- name: Database | Postgres | Write CSR
  community.crypto.openssl_csr:
      path: "{{ cs_postgres_certs_privkey_file }}.csr"
      privatekey_path: "{{ cs_postgres_certs_privkey_file }}"
      common_name: "postgres"
      basic_constraints: CA:FALSE
      basic_constraints_critical: true
      key_usage:
          - digitalSignature
          - keyEncipherment
      extended_key_usage:
          - serverAuth
      subject_alt_name: "{{ ansible_all_ipv4_addresses | map('regex_replace', '^(.*)$', 'IP:\\1') | list
          + ['DNS:' + ansible_hostname, 'DNS:' + ansible_fqdn, 'DNS:' + inventory_hostname,
          'DNS:postgres' + 'DNS:postgres.' + ansible_domain] }}"
      subject_alt_name_critical: true
      backup: false
      mode: "0o600"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"

- name: Database | Postgres | Write Certificate
  community.crypto.x509_certificate:
      path: "{{ cs_postgres_certs_cert_file }}"
      csr_path: "{{ cs_postgres_certs_privkey_file }}.csr"
      ownca_content: "{{ root_ca_cert_pem }}"
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_password }}"
      provider: ownca
      backup: false
      mode: "0o600"
      return_content: true
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"

- name: Database | Postgres | Write CA certificate
  ansible.builtin.copy:
      content: "{{ root_ca_cert_pem }}"
      dest: "{{ cs_postgres_certs_chain_file }}"
      mode: "0644"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      remote_src: false

- name: Database | Postgres | Create pg_hba.conf
  ansible.builtin.copy:
      src: files/db/postgresql/pg_hba.conf
      dest: "{{ cs_postgres_hba_file }}"
      mode: "0644"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      remote_src: false

- name: Database | Postgres | Check if PG_VERSION file exists
  ansible.builtin.stat:
      path: "{{ cs_postgres_data_dir }}/PG_VERSION"
  register: __pg_version_file

- name: Database | Postgres | First Run
  when: not __pg_version_file.stat.exists
  block:
      - name: Database | Postgres | First Run | Create User and Password
        ansible.builtin.set_fact:
            cs_postgres_maintenance_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=40,
                chars=['ascii_letters', 'digits']) }}"
            cs_postgres_maintenance_user: "{{ lookup('community.general.random_string', special=false, length=12) }}"

      - name: Database | Postgres | First Run | Write the Password to Vault
        become: false
        delegate_to: localhost
        home_lab_secrets:
            key: "managed-secrets/postgresql/clusters/\
                {{ cs_postgres_cluster_name }}/servers/{{ inventory_hostname }}/config"
            action: write
            value:
                maintenance_user: "{{ cs_postgres_maintenance_user }}"
                maintenance_password: "{{ cs_postgres_maintenance_password }}"
                maintenance_db: "{{ cs_postgres_maintenance_db }}"
                ipv4s: "{{ ansible_all_ipv4_addresses }}"
                hostname: "{{ ansible_hostname }}"
                fqdn: "{{ ansible_fqdn }}"
                server_port: "{{ cs_postgres_port }}"
                server_version: "{{ cs_postgres_version }}"

      - name: Database | Postgres | First Run | Start Container
        community.docker.docker_container:
            name: "{{ cs_postgres_container_name }}"
            image: "{{ cs_postgres_docker_image }}:{{ cs_postgres_docker_image_tag }}"
            user: "{{ cs_postgres_run_user }}:{{ cs_postgres_run_group }}"
            auto_remove: true
            hostname: "{{ ansible_hostname }}"
            networks:
                - name: "{{ cs_postgres_network_name }}"
            volumes:
                - "{{ cs_postgres_data_dir }}:/var/lib/postgresql/data:rw"
                - "{{ cs_postgres_certs_privkey_file }}:/server-privkey.pem:ro"
                - "{{ cs_postgres_certs_cert_file }}:/server-cert.pem:ro"
                - "{{ cs_postgres_certs_chain_file }}:/server-chain.pem:ro"
                - "{{ cs_postgres_hba_file }}:/pg_hba.conf:ro"
            state: started
            command: "--port={{ cs_postgres_port }}
                --ssl=on
                --ssl_cert_file=/server-cert.pem
                --ssl_key_file=/server-privkey.pem
                --ssl_ca_file=/server-chain.pem
                -c hba_file=/pg_hba.conf"
            ports:
                - "{{ cs_postgres_port }}:{{ cs_postgres_port }}"
            env:
                POSTGRES_PASSWORD: "{{ cs_postgres_maintenance_password }}"
                POSTGRES_USER: "{{ cs_postgres_maintenance_user }}"
                POSTGRES_DB: "{{ cs_postgres_maintenance_db }}"
                TZ: Asia/Kolkata

      - name: Database | Postgres | First Run | Create Client Certificates temp files
        ansible.builtin.tempfile:
            state: file
        register: __temp_file_first_run_client_cert
        with_items:
            - "key"
            - "cert"
            - "ca_chain"

      - name: Database | Postgres | First Run | Write client private key
        community.crypto.openssl_privatekey:
            path: "{{ __temp_file_first_run_client_cert.results[0].path }}"
            type: RSA
            size: 4096
            backup: false
            mode: "0o600"
            owner: "{{ cs_postgres_run_user }}"
            group: "{{ cs_postgres_run_group }}"

      - name: Database | Postgres | First Run | Write client CSR
        community.crypto.openssl_csr:
            path: "{{ __temp_file_first_run_client_cert.results[0].path }}.csr"
            privatekey_path: "{{ __temp_file_first_run_client_cert.results[0].path }}"
            common_name: "{{ cs_postgres_maintenance_user }}"
            basic_constraints: CA:FALSE
            basic_constraints_critical: true
            key_usage:
                - digitalSignature
                - keyEncipherment
            extended_key_usage:
                - clientAuth
            backup: false
            mode: "0o600"
            owner: "{{ cs_postgres_run_user }}"
            group: "{{ cs_postgres_run_group }}"

      - name: Database | Postgres | First Run | Write client Certificate
        community.crypto.x509_certificate:
            path: "{{ __temp_file_first_run_client_cert.results[1].path }}"
            csr_path: "{{ __temp_file_first_run_client_cert.results[0].path }}.csr"
            ownca_content: "{{ root_ca_cert_pem }}"
            ownca_privatekey_content: "{{ root_ca_key_pem }}"
            ownca_privatekey_passphrase: "{{ root_ca_key_password }}"
            provider: ownca
            mode: "0o600"
            owner: "{{ cs_postgres_run_user }}"
            group: "{{ cs_postgres_run_group }}"

      - name: Database | Postgres | First Run | Write client CA certificate
        ansible.builtin.copy:
            content: "{{ root_ca_cert_pem }}"
            dest: "{{ __temp_file_first_run_client_cert.results[2].path }}"
            owner: "{{ cs_postgres_run_user }}"
            group: "{{ cs_postgres_run_group }}"
            mode: "0600"
            backup: false

      - name: Database | Postgres | First Run | Wait for service to start
        community.postgresql.postgresql_ping:
            login_host: "{{ ansible_all_ipv4_addresses[0] }}"
            login_password: "{{ cs_postgres_maintenance_password }}"
            login_user: "{{ cs_postgres_maintenance_user }}"
            login_port: "{{ cs_postgres_port }}"
            login_db: "{{ cs_postgres_maintenance_db }}"
            ssl_mode: verify-full
            ssl_rootcert: "{{ __temp_file_first_run_client_cert.results[2].path }}"
            ssl_cert: "{{ __temp_file_first_run_client_cert.results[1].path }}"
            ssl_key: "{{ __temp_file_first_run_client_cert.results[0].path }}"
        register: is_postgres_up
        until: is_postgres_up.is_available
        retries: 30
        delay: 3

      - name: Database | Postgres | First Run | Remove temporary certificates
        ansible.builtin.file:
            path: "{{ item.path }}"
            state: absent
        with_items: "{{ __temp_file_first_run_client_cert.results }}"

      - name: Database | Postgres | First Run | Remove container
        community.docker.docker_container:
            name: "{{ cs_postgres_container_name }}"
            state: absent
            force_kill: true

- name: Database | Postgres | Create User and Password
  ansible.builtin.set_fact:
      cs_postgres_maintenance_password: "{{ lookup('home_lab_secrets', 'managed-secrets/postgresql/clusters/'
          + cs_postgres_cluster_name + '/servers/' + inventory_hostname + '/config').maintenance_password }}"
      cs_postgres_maintenance_user: "{{ lookup('home_lab_secrets', 'managed-secrets/postgresql/clusters/'
          + cs_postgres_cluster_name + '/servers/' + inventory_hostname + '/config').maintenance_user }}"

- name: Database | Postgres | Start Container
  community.docker.docker_container:
      name: "{{ cs_postgres_container_name }}"
      image: "{{ cs_postgres_docker_image }}:{{ cs_postgres_docker_image_tag }}"
      user: "{{ cs_postgres_run_user }}:{{ cs_postgres_run_group }}"
      hostname: "{{ ansible_hostname }}"
      restart_policy: unless-stopped
      networks:
          - name: "{{ cs_postgres_network_name }}"
      volumes:
          - "{{ cs_postgres_data_dir }}:/var/lib/postgresql/data"
          - "{{ cs_postgres_certs_privkey_file }}:/server-privkey.pem:ro"
          - "{{ cs_postgres_certs_cert_file }}:/server-cert.pem:ro"
          - "{{ cs_postgres_certs_chain_file }}:/server-chain.pem:ro"
          - "{{ cs_postgres_hba_file }}:/pg_hba.conf:ro"
      state: started
      restart: true
      command: "--port={{ cs_postgres_port }}
          --ssl=on
          --ssl_cert_file=/server-cert.pem
          --ssl_key_file=/server-privkey.pem
          --ssl_ca_file=/server-chain.pem
          -c hba_file=/pg_hba.conf"
      ports:
          - "{{ cs_postgres_port }}:{{ cs_postgres_port }}"
      env:
          TZ: Asia/Kolkata

- name: Database | Postgres | Create Client Certificates temp files
  ansible.builtin.tempfile:
      state: file
  register: __temp_file_client_cert
  with_items:
      - "key"
      - "cert"
      - "ca_chain"

- name: Database | Postgres | Write client private key
  community.crypto.openssl_privatekey:
      path: "{{ __temp_file_client_cert.results[0].path }}"
      type: RSA
      size: 4096
      backup: false
      mode: "0o600"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"

- name: Database | Postgres | Write client CSR
  community.crypto.openssl_csr:
      path: "{{ __temp_file_client_cert.results[0].path }}.csr"
      privatekey_path: "{{ __temp_file_client_cert.results[0].path }}"
      common_name: "{{ cs_postgres_maintenance_user }}"
      basic_constraints: CA:FALSE
      basic_constraints_critical: true
      key_usage:
          - digitalSignature
          - keyEncipherment
      extended_key_usage:
          - clientAuth
      backup: false
      mode: "0o600"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"

- name: Database | Postgres | Write client Certificate
  community.crypto.x509_certificate:
      path: "{{ __temp_file_client_cert.results[1].path }}"
      csr_path: "{{ __temp_file_client_cert.results[0].path }}.csr"
      ownca_content: "{{ root_ca_cert_pem }}"
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_password }}"
      provider: ownca
      mode: "0o600"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"

- name: Database | Postgres | Write client CA certificate
  ansible.builtin.copy:
      content: "{{ root_ca_cert_pem }}"
      dest: "{{ __temp_file_client_cert.results[2].path }}"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      mode: "0600"
      backup: false

- name: Database | Postgres | Wait for service to start
  community.postgresql.postgresql_ping:
      login_host: "{{ ansible_all_ipv4_addresses[0] }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      login_db: "{{ cs_postgres_maintenance_db }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  register: is_postgres_up
  until: is_postgres_up.is_available
  retries: 30
  delay: 3

- name: Database | Postgres | Generate random user and password
  ansible.builtin.set_fact:
      password: "{{ lookup('ansible.builtin.password', '/dev/null', length=40,
          chars=['ascii_letters', 'digits']) }}"
  register: __random_user_password
  with_items: "{{ cs_postgres_apps_dict | dict2items }}"

- name: Database | Postgres | Create Database users and passwords in Vault
  become: false
  delegate_to: localhost
  home_lab_secrets:
      key: "managed-secrets/postgresql/clusters/{{ cs_postgres_cluster_name }}/servers/{{ inventory_hostname }}/db/{{
          item.item.key }}"
      action: write
      value:
          user: "{{ item.item.value.user }}"
          password: "{{ item.ansible_facts.password }}"
          maintenance_db: "{{ cs_postgres_maintenance_db }}"
          ipv4s: "{{ ansible_all_ipv4_addresses }}"
          hostname: "{{ ansible_hostname }}"
          fqdn: "{{ ansible_fqdn }}"
          server_port: "{{ cs_postgres_port }}"
          server_version: "{{ cs_postgres_version }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Write the Password to Vault again for the maintenance user
      in case some some connection properties changes
  become: false
  delegate_to: localhost
  home_lab_secrets:
      key: "managed-secrets/postgresql/clusters/{{ cs_postgres_cluster_name }}/servers/{{ inventory_hostname }}/config"
      action: write
      value:
          maintenance_user: "{{ cs_postgres_maintenance_user }}"
          maintenance_password: "{{ cs_postgres_maintenance_password }}"
          maintenance_db: "{{ cs_postgres_maintenance_db }}"
          ipv4s: "{{ ansible_all_ipv4_addresses }}"
          hostname: "{{ ansible_hostname }}"
          fqdn: "{{ ansible_fqdn }}"
          server_port: "{{ cs_postgres_port }}"
          server_version: "{{ cs_postgres_version }}"

- name: Database | Postgres | Update maintenance user password
  community.postgresql.postgresql_user:
      name: "{{ cs_postgres_maintenance_user }}"
      password: "{{ cs_postgres_maintenance_password }}"
      comment: "Postgres maintenance user,
          Managed by Ansible home-lab playbook {{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"
      state: "present"
      login_host: "{{ ansible_all_ipv4_addresses[0] }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      login_db: "{{ cs_postgres_maintenance_db }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"

- name: Database | Postgres | Update maintenance database
  community.postgresql.postgresql_db:
      name: "{{ cs_postgres_maintenance_db }}"
      owner: "{{ cs_postgres_maintenance_user }}"
      state: "present"
      comment: "Postgres maintenance database,
          Managed by Ansible home-lab playbook {{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"
      maintenance_db: "{{ cs_postgres_maintenance_db }}"
      login_host: "{{ ansible_all_ipv4_addresses[0] }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"

- name: Database | Postgres | Create users
  community.postgresql.postgresql_user:
      name: "{{ item.item.value.user }}"
      password: "{{ item.ansible_facts.password }}"
      state: "present"
      login_host: "{{ ansible_all_ipv4_addresses[0] }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      login_db: "{{ cs_postgres_maintenance_db }}"
      ssl_mode: verify-full
      comment: "User for {{ item.item.key }},
          Managed by Ansible home-lab playbook {{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Create databases
  community.postgresql.postgresql_db:
      name: "{{ item.item.key }}"
      owner: "{{ item.item.value.user }}"
      state: "present"
      encoding: "UTF8"
      template: "template0"
      comment: "Database for {{ item.item.key }}, Owned by {{ item.item.value.user }},
          Managed by Ansible home-lab playbook {{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"
      maintenance_db: "{{ cs_postgres_maintenance_db }}"
      login_host: "{{ ansible_all_ipv4_addresses[0] }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Grant privileges table
  community.postgresql.postgresql_privs:
      type: "table"
      database: "{{ item.item.key }}"
      obj: "ALL_IN_SCHEMA"
      role: "{{ item.item.value.user }}"
      privs: "ALL"
      admin_option: "true"
      login_host: "{{ ansible_all_ipv4_addresses[0] }}"
      #   login_db: "{{ cs_postgres_maintenance_db }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Grant privileges sequence
  community.postgresql.postgresql_privs:
      type: "sequence"
      database: "{{ item.item.key }}"
      obj: "ALL_IN_SCHEMA"
      role: "{{ item.item.value.user }}"
      privs: "ALL"
      admin_option: "true"
      login_host: "{{ ansible_all_ipv4_addresses[0] }}"
      #   login_db: "{{ cs_postgres_maintenance_db }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Grant privileges function
  community.postgresql.postgresql_privs:
      type: "function"
      database: "{{ item.item.key }}"
      obj: "ALL_IN_SCHEMA"
      role: "{{ item.item.value.user }}"
      privs: "ALL"
      admin_option: "true"
      login_host: "{{ ansible_all_ipv4_addresses[0] }}"
      #   login_db: "{{ cs_postgres_maintenance_db }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Grant privileges procedure
  community.postgresql.postgresql_privs:
      type: "procedure"
      database: "{{ item.item.key }}"
      obj: "ALL_IN_SCHEMA"
      role: "{{ item.item.value.user }}"
      privs: "ALL"
      admin_option: "true"
      login_host: "{{ ansible_all_ipv4_addresses[0] }}"
      #   login_db: "{{ cs_postgres_maintenance_db }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Change owner of databases
  community.postgresql.postgresql_owner:
      obj_type: "database"
      obj_name: "{{ item.item.key }}"
      new_owner: "{{ item.item.value.user }}"
      login_host: "{{ ansible_all_ipv4_addresses[0] }}"
      login_db: "{{ cs_postgres_maintenance_db }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ __temp_file_client_cert.results[2].path }}"
      ssl_cert: "{{ __temp_file_client_cert.results[1].path }}"
      ssl_key: "{{ __temp_file_client_cert.results[0].path }}"
  with_items: "{{ __random_user_password.results }}"

- name: Database | Postgres | Remove temporary certificates
  ansible.builtin.file:
      path: "{{ item.path }}"
      state: absent
  with_items: "{{ __temp_file_client_cert.results }}"
