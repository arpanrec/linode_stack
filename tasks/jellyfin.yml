---
- name: Jellyfin | Include common crypt mount
  ansible.builtin.include_tasks:
      file: tasks/common/crypt_mount.yml
  vars:
      cs_crypt_mount_vault_id: "{{ cs_jellyfin_external_disk_id }}"
      cs_crypt_machine_cluster: "{{ cs_jellyfin_cluster }}"

- name: Jellyfin | Set facts
  ansible.builtin.set_fact:
      cs_jellyfin_internal_http_port: "{{ __jellyfin_vault_details.internal_http_port }}"
      cs_jellyfin_internal_https_port: "{{ __jellyfin_vault_details.internal_https_port }}"
      cs_jellyfin_public_http_port: "{{ __jellyfin_vault_details.public_http_port }}"
      cs_jellyfin_public_https_port: "{{ __jellyfin_vault_details.public_https_port }}"
      cs_jellyfin_qbittorrent_nox_https_port: "{{ __jellyfin_vault_details.qbittorrent_nox_https_port }}"
      cs_jellyfin_qbittorrent_nox_listen_port: "{{ __jellyfin_vault_details.qbittorrent_nox_listen_port }}"
      cs_jellyfin_qbittorrent_nox_password: "{{ __jellyfin_vault_details.qbittorrent_password }}"
      cs_jellyfin_qbittorrent_nox_username: "{{ __jellyfin_vault_details.qbittorrent_username }}"
  vars:
      __jellyfin_vault_details: "{{ lookup('lab_secrets', 'secret/' + cs_jellyfin_cluster
          + '/' + inventory_hostname + '/jellyfin') }}"

- name: Jellyfin | Create Group
  ansible.builtin.group:
      name: "{{ cs_jellyfin_group_name }}"
      state: present
      system: true

- name: Jellyfin | Create User
  ansible.builtin.user:
      name: "{{ cs_jellyfin_user_name }}"
      state: present
      system: true
      group: "{{ cs_jellyfin_group_name }}"
      append: true
      create_home: false
      groups:
          - video
          - render
          - docker
      shell: /bin/false
      home: "{{ cs_jellyfin_container_root }}"

- name: Jellyfin | Create Jellyfin directories
  ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      mode: "0750"
  with_items:
      - "{{ cs_jellyfin_media_dir }}"
      - "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}"
      - "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_data_dir }}"
      - "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_log_dir }}"
      - "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_cache_dir }}"

- name: Jellyfin | Create Env File
  community.general.ini_file:
      path: "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}/.env"
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      mode: "0640"
      option: "{{ item.option }}"
      value: "{{ item.value }}"
      no_extra_spaces: true
      create: true
  with_items:
      - option: "JELLYFIN_CONFIG_DIR"
        value: "{{ cs_jellyfin_config_dir }}"
      - option: "JELLYFIN_DATA_DIR"
        value: "{{ cs_jellyfin_data_dir }}"
      - option: "JELLYFIN_LOG_DIR"
        value: "{{ cs_jellyfin_log_dir }}"
      - option: "JELLYFIN_CACHE_DIR"
        value: "{{ cs_jellyfin_cache_dir }}"
      - option: "JELLYFIN_USER"
        value: "{{ cs_jellyfin_user_name }}"

- name: Jellyfin | Gather facts
  ansible.builtin.setup:
      gather_subset: all

- name: Jellyfin | Container | Enable Docker
  ansible.builtin.systemd_service:
      name: docker
      enabled: true
      state: started

- name: Jellyfin | Container | Remove Jellyfin Docker container
  community.docker.docker_container:
      name: "{{ cs_jellyfin_container_name }}"
      state: absent

- name: Jellyfin | Container | Getent
  ansible.builtin.getent:
      database: "{{ item }}"
  with_items:
      - group
      - passwd

- name: Jellyfin | Container | Fix Permissions
  ansible.builtin.shell:
      cmd: |+
          find {{ item }} -type d -exec chmod 0750 {} \;
          find {{ item }} -type f -exec chmod 0640 {} \;
          chown -R {{ cs_jellyfin_user_name }}:{{ cs_jellyfin_group_name }} {{ item }};
  changed_when: true
  with_items:
      - "{{ cs_jellyfin_media_dir }}"
      - "{{ cs_jellyfin_container_root }}"

- name: Jellyfin | Container | Start Container
  become: true
  become_user: "{{ cs_jellyfin_user_name }}"
  community.docker.docker_container:
      name: "{{ cs_jellyfin_container_name }}"
      image: docker.io/jellyfin/jellyfin:{{ cs_jellyfin_version }}
      pull: missing
      state: started
      auto_remove: false
      runtime: nvidia
      dns_servers:
          - "{{ cs_jellyfin_server_dns }}"
      device_requests:
          - capabilities:
                - gpu
            count: -1
            driver: nvidia
      hostname: "{{ ansible_facts.hostname }}"
      detach: true
      privileged: false
      log_driver: json-file
      log_options:
          max-size: "1m"
          max-file: "1"
      restart_policy: unless-stopped
      user: "{{ ansible_facts.getent_passwd['jellyfin'][1] }}:{{ ansible_facts.getent_passwd['jellyfin'][2] }}"
      devices: "{{ cs_jellyfin_container_dri_list }}"
      env_file: "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}/.env"
      groups:
          - "{{ ansible_facts.getent_group['video'][1] }}"
          - "{{ ansible_facts.getent_group['render'][1] }}"
      volumes:
          - "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}:{{ cs_jellyfin_config_dir }}:rw"
          - "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_data_dir }}:{{ cs_jellyfin_data_dir }}:rw"
          - "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_log_dir }}:{{ cs_jellyfin_log_dir }}:rw"
          - "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_cache_dir }}:{{ cs_jellyfin_cache_dir }}:rw"
      mounts:
          - source: "{{ cs_jellyfin_media_dir }}"
            target: "/media"
            type: bind
            read_only: false
      env:
          TZ: Asia/Kolkata
          PUID: "{{ ansible_facts.getent_passwd['jellyfin'][1] }}"
          PGID: "{{ ansible_facts.getent_passwd['jellyfin'][2] }}"
          HEALTHCHECK_URL: "http://localhost:{{ cs_jellyfin_internal_http_port }}/health"
      ports:
          - "{{ cs_jellyfin_internal_http_port }}:{{ cs_jellyfin_internal_http_port }}"
          - "{{ cs_jellyfin_internal_https_port }}:{{ cs_jellyfin_internal_https_port }}"
          - "{{ cs_jellyfin_public_http_port }}:{{ cs_jellyfin_public_http_port }}"
          - "{{ cs_jellyfin_public_https_port }}:{{ cs_jellyfin_public_https_port }}"
          - "8096:8096"
          - "7359:7359"
          - "1900:1900"

- name: Jellyfin | Config | Install python3-lxml
  ansible.builtin.apt:
      name:
          - python3-lxml
      state: present

- name: Jellyfin | Config | Check if system.xml exists
  ansible.builtin.stat:
      path: "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}/system.xml"
  register: __jellyfin_system_xml_exists
  until: __jellyfin_system_xml_exists.stat.exists
  retries: 10
  delay: 2

- name: Jellyfin | Config | Configure System
  become: true
  become_user: "{{ cs_jellyfin_user_name }}"
  community.general.xml:
      path: "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}/system.xml"
      xpath: /ServerConfiguration/{{ item.xpath }}
      value: "{{ item.value }}"
  with_items:
      - xpath: "CachePath"
        value: "{{ cs_jellyfin_cache_dir }}"
      - xpath: "MetadataPath"
        value: "{{ cs_jellyfin_data_dir }}/metadata"
      - xpath: "EnableFolderView"
        value: "true"
      - xpath: "MetadataCountryCode"
        value: "IN"
      - xpath: "QuickConnectAvailable"
        value: "false"

- name: Jellyfin | Config | Configure Encoding
  community.general.xml:
      path: "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}/encoding.xml"
      xpath: /EncodingOptions/{{ item.xpath }}
      value: "{{ item.value }}"
  with_items:
      - xpath: "TranscodingTempPath"
        value: "{{ cs_jellyfin_cache_dir }}/transcodes"
  retries: 5
  delay: 5

- name: Jellyfin | Config | Copy xbmcmetadata
  ansible.builtin.copy:
      src: "files/jellyfin/xbmcmetadata.xml"
      dest: "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}/xbmcmetadata.xml"
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      mode: "0640"

- name: Jellyfin | Config | Copy branding
  ansible.builtin.copy:
      src: "files/jellyfin/branding.xml"
      dest: "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}/branding.xml"
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      mode: "0640"

- name: Jellyfin | Config | Check if network.xml exists
  ansible.builtin.stat:
      path: "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}/network.xml"
  register: __jellyfin_network_xml_exists

- name: Jellyfin | Config | Enable UFW 8096 when network.xml does not exists
  community.general.ufw:
      state: enabled
      rule: allow
      port: 8096
      proto: tcp
      comment: "Allow Jellyfin HTTP Port, Managed by Ansible home-lab playbook."
  when: not __jellyfin_network_xml_exists.stat.exists

- name: Jellyfin | Config | Fail if network.xml does not exist
  no_log: false
  ansible.builtin.fail:
      msg: |+
          Jellyfin network.xml does not exist.
          Do the initial setup manually. This will create the network.xml.
          Then re-run the playbook.
  when: not __jellyfin_network_xml_exists.stat.exists

- name: Jellyfin | Config | Enable UFW Firewall
  community.general.ufw:
      rule: allow
      port: "{{ item.port }}"
      proto: tcp
      state: enabled
      comment: "Allow Jellyfin {{ item.comment }}, Managed by Ansible home-lab playbook."
  with_items:
      - port: "{{ cs_jellyfin_internal_http_port }}"
        comment: "Internal HTTP Port"
      - port: "{{ cs_jellyfin_internal_https_port }}"
        comment: "Internal HTTPS Port"
      - port: "{{ cs_jellyfin_public_http_port }}"
        comment: "Public HTTP Port"
      - port: "{{ cs_jellyfin_public_https_port }}"
        comment: "Public HTTPS Port"

- name: Jellyfin | Config | Enable UFW UDP Firewall
  community.general.ufw:
      rule: allow
      port: "{{ item.port }}"
      proto: udp
      state: enabled
      comment: "Allow Jellyfin {{ item.comment }} port, Managed by Ansible home-lab playbook."
  with_items:
      - port: 1900
        comment: "service auto-discovery"
      - port: 7359
        comment: "auto-discovery"

- name: Jellyfin | Config | Create temp files
  ansible.builtin.tempfile:
      state: file
      suffix: ".pem"
  with_items:
      - key
      - cert
      - chain
  register: __jellyfin_temp_files

- name: Jellyfin | Config | Write private key
  community.crypto.openssl_privatekey:
      path: "{{ __jellyfin_temp_files.results[0].path }}"
      type: RSA
      size: 4096
      mode: "0600"

- name: Jellyfin | Config | Write CSR
  community.crypto.openssl_csr:
      path: "{{ __jellyfin_temp_files.results[0].path }}.csr"
      privatekey_path: "{{ __jellyfin_temp_files.results[0].path }}"
      common_name: "jellyfin"
      basic_constraints: CA:FALSE
      basic_constraints_critical: true
      key_usage:
          - digitalSignature
          - keyEncipherment
      extended_key_usage:
          - serverAuth
      subject_alt_name: "{{ ansible_all_ipv4_addresses | map('regex_replace', '^(.*)$', 'IP:\\1') | list
          + ['DNS:' + ansible_hostname, 'DNS:' + ansible_fqdn, 'DNS:' + inventory_hostname,
          'DNS:jellyfin' + 'DNS:jellyfin.' + ansible_domain] }}"
      subject_alt_name_critical: true
      mode: "0600"

- name: Jellyfin | Config | Write Certificate
  community.crypto.x509_certificate:
      path: "{{ __jellyfin_temp_files.results[1].path }}"
      csr_path: "{{ __jellyfin_temp_files.results[0].path }}.csr"
      ownca_content: "{{ root_ca_cert_pem }}"
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_password }}"
      provider: ownca
      mode: "0600"

- name: Jellyfin | Config | Write certificate chain
  ansible.builtin.copy:
      content: "{{ root_ca_cert_pem }}"
      dest: "{{ __jellyfin_temp_files.results[2].path }}"
      mode: "0600"
      remote_src: false

- name: Jellyfin | Config | Set random password
  ansible.builtin.set_fact:
      cs_jellyfin_p12_cert_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=40,
          chars=['ascii_letters', 'digits']) }}"

- name: Jellyfin | Config | Generate PKCS#12 file
  community.crypto.openssl_pkcs12:
      action: export
      path: "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}/jellyfin.pfx"
      friendly_name: jellyfin
      privatekey_path: "{{ __jellyfin_temp_files.results[0].path }}"
      certificate_path: "{{ __jellyfin_temp_files.results[1].path }}"
      other_certificates:
          - "{{ __jellyfin_temp_files.results[2].path }}"
      passphrase: "{{ cs_jellyfin_p12_cert_password }}"
      mode: "0600"
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      state: present

- name: Jellyfin | Config | Configure Network Ports
  become: true
  become_user: "{{ cs_jellyfin_user_name }}"
  community.general.xml:
      path: "{{ cs_jellyfin_container_root }}/{{ cs_jellyfin_config_dir }}/network.xml"
      xpath: /NetworkConfiguration/{{ item.xpath }}
      value: "{{ item.value }}"
  with_items:
      - xpath: "PublicHttpPort"
        value: "{{ cs_jellyfin_public_http_port }}"
      - xpath: "PublicHttpsPort"
        value: "{{ cs_jellyfin_public_https_port }}"
      - xpath: "InternalHttpPort"
        value: "{{ cs_jellyfin_internal_http_port }}"
      - xpath: "InternalHttpsPort"
        value: "{{ cs_jellyfin_internal_https_port }}"
      - xpath: "EnableRemoteAccess"
        value: "true"
      - xpath: "EnableHttps"
        value: "true"
      - xpath: "RequireHttps"
        value: "true"
      - xpath: "CertificatePath"
        value: "{{ cs_jellyfin_config_dir }}/jellyfin.pfx"
      - xpath: "CertificatePassword"
        value: "{{ cs_jellyfin_p12_cert_password }}"
      - xpath: "AutoDiscovery"
        value: "true"
      - xpath: "EnableUPnP"
        value: "false"
      - xpath: "EnableIPv4"
        value: "true"
      - xpath: "EnableIPv6"
        value: "false"
      - xpath: "EnableRemoteAccess"
        value: "true"
      - xpath: "IgnoreVirtualInterfaces"
        value: "true"

- name: Jellyfin | Container | Start Container
  become: true
  become_user: "{{ cs_jellyfin_user_name }}"
  ansible.builtin.command:
      argv:
          - docker
          - restart
          - "{{ cs_jellyfin_container_name }}"
  changed_when: true

- name: Jellyfin | QBittorrent Nox | Remove QBittorrent Nox Docker container
  community.docker.docker_container:
      name: "{{ cs_jellyfin_qbittorrent_nox_container_name }}"
      state: absent

- name: Jellyfin | QBittorrent Nox | Create Directories
  ansible.builtin.file:
      path: "{{ cs_jellyfin_qbittorrent_nox_container_root }}/{{ item }}"
      state: directory
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      mode: "0750"
  with_items:
      - config
      - downloads
      - torrents

- name: Jellyfin | QBittorrent Nox | Fix Permissions
  ansible.builtin.shell:
      cmd: |+
          chown -R {{ cs_jellyfin_user_name }}:{{ cs_jellyfin_group_name }} \
              {{ cs_jellyfin_qbittorrent_nox_container_root }};
          find {{ cs_jellyfin_qbittorrent_nox_container_root }} -type d -exec chmod 0750 {} \;
          find {{ cs_jellyfin_qbittorrent_nox_container_root }} -type f -exec chmod 0640 {} \;
  changed_when: true

- name: Jellyfin | QBittorrent Nox | Start Container
  community.docker.docker_container:
      name: "{{ cs_jellyfin_qbittorrent_nox_container_name }}"
      image: qbittorrentofficial/qbittorrent-nox:{{ cs_jellyfin_qbittorrent_nox_version }}
      pull: missing
      state: started
      auto_remove: false
      hostname: "{{ ansible_facts.hostname }}"
      detach: true
      restart_policy: unless-stopped
      user: "0:0"
      dns_servers:
          - "{{ cs_jellyfin_server_dns }}"
      volumes:
          - "{{ cs_jellyfin_qbittorrent_nox_container_root }}/config:/config"
          - "{{ cs_jellyfin_qbittorrent_nox_container_root }}/downloads:/downloads"
          - "{{ cs_jellyfin_qbittorrent_nox_container_root }}/torrents:/torrents"
      mounts:
          - source: "{{ cs_jellyfin_media_dir }}"
            target: "/media"
            type: bind
            read_only: false
      ports:
          - "{{ cs_jellyfin_qbittorrent_nox_https_port }}:{{ cs_jellyfin_qbittorrent_nox_https_port }}/tcp"
          - "{{ cs_jellyfin_qbittorrent_nox_listen_port }}:{{ cs_jellyfin_qbittorrent_nox_listen_port }}/tcp"
          - "{{ cs_jellyfin_qbittorrent_nox_listen_port }}:{{ cs_jellyfin_qbittorrent_nox_listen_port }}/udp"
      env:
          TZ: Asia/Kolkata
          PUID: "{{ ansible_facts.getent_passwd['jellyfin'][1] }}"
          PGID: "{{ ansible_facts.getent_passwd['jellyfin'][2] }}"
          QBT_WEBUI_PORT: "{{ cs_jellyfin_qbittorrent_nox_https_port | string }}"
          QBT_LEGAL_NOTICE: confirm

- name: Jellyfin | QBittorrent Nox | Wait for the config file to be created
  ansible.builtin.stat:
      path: "{{ cs_jellyfin_qbittorrent_nox_container_root }}/config/qBittorrent/config/qBittorrent.conf"
  register: __jellyfin_qbittorrent_nox_config_file
  until: __jellyfin_qbittorrent_nox_config_file.stat.exists
  retries: 10
  delay: 5

- name: Jellyfin | QBittorrent Nox | Stop container
  ansible.builtin.command:
      argv:
          - docker
          - stop
          - "{{ cs_jellyfin_qbittorrent_nox_container_name }}"
  changed_when: true

- name: Jellyfin | QBittorrent Nox | allow ufw
  community.general.ufw:
      rule: allow
      port: "{{ item.port }}"
      proto: "{{ item.proto }}"
      state: enabled
      comment: "Allow {{ item.comment }}, Managed by Ansible home-lab playbook."
  with_items:
      - port: "{{ cs_jellyfin_qbittorrent_nox_listen_port }}"
        comment: "QBittorrent Nox Listen Port TCP"
        proto: tcp
      - port: "{{ cs_jellyfin_qbittorrent_nox_listen_port }}"
        comment: "QBittorrent Nox Listen Port UDP"
        proto: udp
      - port: "{{ cs_jellyfin_qbittorrent_nox_https_port }}"
        comment: "QBittorrent Nox HTTPS Port"
        proto: tcp

- name: Jellyfin | QBittorrent Nox | Write private key
  community.crypto.openssl_privatekey:
      path: "{{ cs_jellyfin_qbittorrent_nox_container_root }}/config/qBittorrent/config/server.key"
      type: RSA
      size: 4096
      mode: "0600"
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"

- name: Jellyfin | QBittorrent Nox | Write CSR
  community.crypto.openssl_csr:
      path: "{{ cs_jellyfin_qbittorrent_nox_container_root }}/config/qBittorrent/config/server.key.csr"
      privatekey_path: "{{ cs_jellyfin_qbittorrent_nox_container_root }}/config/qBittorrent/config/server.key"
      common_name: "QBittorrent Nox"
      basic_constraints: CA:FALSE
      basic_constraints_critical: true
      key_usage:
          - digitalSignature
          - keyEncipherment
      extended_key_usage:
          - serverAuth
      subject_alt_name: "{{ ansible_all_ipv4_addresses | map('regex_replace', '^(.*)$', 'IP:\\1') | list
          + ['DNS:' + ansible_hostname, 'DNS:' + ansible_fqdn, 'DNS:' + inventory_hostname] }}"
      subject_alt_name_critical: true
      mode: "0600"
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"

- name: Jellyfin | QBittorrent Nox | Create Certificate
  community.crypto.x509_certificate_pipe:
      csr_path: "{{ cs_jellyfin_qbittorrent_nox_container_root }}/config/qBittorrent/config/server.key.csr"
      ownca_content: "{{ root_ca_cert_pem }}"
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_password }}"
      provider: ownca
  register: __jellyfin_qbittorrent_nox_cert

- name: Jellyfin | QBittorrent Nox | Write certificate full chain
  ansible.builtin.copy:
      content: "{{ __jellyfin_qbittorrent_nox_cert.certificate }}\n{{ root_ca_cert_pem }}"
      dest: "{{ cs_jellyfin_qbittorrent_nox_container_root }}/config/qBittorrent/config/server.crt"
      mode: "0600"
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      remote_src: false

- name: Jellyfin | QBittorrent Nox | Set Config
  community.general.ini_file:
      path: "{{ cs_jellyfin_qbittorrent_nox_container_root }}/config/qBittorrent/config/qBittorrent.conf"
      section: "{{ item.section }}"
      option: "{{ item.option }}"
      value: "{{ item.value | default(omit) }}"
      owner: "{{ cs_jellyfin_user_name }}"
      group: "{{ cs_jellyfin_group_name }}"
      state: "{{ item.state | default('present') }}"
      mode: "0640"
      create: true
      backup: true
      no_extra_spaces: true
  with_items:
      - section: "Preferences"
        option: 'General\Locale'
        value: "en"
      - section: "Preferences"
        option: 'WebUI\HTTPS\CertificatePath'
        value: "/config/qBittorrent/config/server.crt"
      - section: "Preferences"
        option: 'WebUI\HTTPS\Enabled'
        value: "true"
      - section: "Preferences"
        option: 'WebUI\HTTPS\KeyPath'
        value: "/config/qBittorrent/config/server.key"
      - section: "Preferences"
        option: 'WebUI\HostHeaderValidation'
        value: "true"
      - section: "Preferences"
        option: 'WebUI\Password_PBKDF2'
        value: "{{ cs_jellyfin_qbittorrent_nox_password | generate_qbittorrent_hash }}"
      - section: "Preferences"
        option: 'WebUI\Port'
        value: "{{ cs_jellyfin_qbittorrent_nox_https_port }}"
      - section: "Preferences"
        option: 'WebUI\ReverseProxySupportEnabled'
        value: "true"
      - section: "Preferences"
        option: 'WebUI\ServerDomains'
        state: absent
      - section: "Preferences"
        option: 'WebUI\UseUPnP'
        value: "true"
      - section: "Preferences"
        option: 'WebUI\Username'
        value: "{{ cs_jellyfin_qbittorrent_nox_username }}"

      - section: "Preferences"
        option: 'MailNotification\email'
        value: "{{ __qbittorrent_server_bot_email.destination }}"
      - section: "Preferences"
        option: 'MailNotification\enabled'
        value: "true"
      - section: "Preferences"
        option: 'MailNotification\password'
        value: "{{ __qbittorrent_server_bot_email.smtppassword }}"
      - section: "Preferences"
        option: 'MailNotification\req_auth'
        value: "true"
      - section: "Preferences"
        option: 'MailNotification\req_ssl'
        value: "true"
      - section: "Preferences"
        option: 'MailNotification\sender'
        value: "{{ __qbittorrent_server_bot_email.from_address }}@{{
            __qbittorrent_server_bot_email.domain }}"
      - section: "Preferences"
        option: 'MailNotification\smtp_server'
        value: "{{ __qbittorrent_server_bot_email.smtphost }}"
      - section: "Preferences"
        option: 'MailNotification\username'
        value: "{{ __qbittorrent_server_bot_email.from_address }}@{{
            __qbittorrent_server_bot_email.domain }}"

      - section: "BitTorrent"
        option: 'Session\AddTorrentStopped'
        value: "false"
      - section: "BitTorrent"
        option: 'Session\BTProtocol'
        value: "Both"
      - section: "BitTorrent"
        option: 'Session\DHTEnabled'
        value: "true"
      - section: "BitTorrent"
        option: 'Session\DefaultSavePath'
        value: "/downloads"
      - section: "BitTorrent"
        option: 'Session\FinishedTorrentExportDirectory'
        value: "/torrents/completed"
      - section: "BitTorrent"
        option: 'Session\LSDEnabled'
        value: "true"
      - section: "BitTorrent"
        option: 'Session\PeXEnabled'
        value: "true"
      - section: "BitTorrent"
        option: 'Session\ProxyPeerConnections'
        value: "true"
      - section: "BitTorrent"
        option: 'Session\QueueingSystemEnabled'
        value: "true"
      - section: "BitTorrent"
        option: 'Session\Port'
        value: "{{ cs_jellyfin_qbittorrent_nox_listen_port }}"
      - section: "BitTorrent"
        option: 'Session\TempPath'
        value: "/downloads/temp"
      - section: "BitTorrent"
        option: 'Session\TempPathEnabled'
        value: "false"
      - section: "BitTorrent"
        option: 'Session\TorrentExportDirectory'
        value: "/torrents"

      - section: "Network"
        option: "PortForwardingEnabled"
        value: "true"

      - section: "Core"
        option: "AutoDeleteAddedTorrentFile"
        value: "Never"
  vars:
      __qbittorrent_server_bot_email: "{{ lookup('lab_secrets', 'secret/bot_email') }}"

- name: Jellyfin | QBittorrent Nox | Start Container
  ansible.builtin.command:
      argv:
          - docker
          - start
          - "{{ cs_jellyfin_qbittorrent_nox_container_name }}"
  changed_when: true
