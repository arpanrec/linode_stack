---
- name: Nextcloud | Disk | Application | Include common crypt mount
  ansible.builtin.include_tasks:
      file: tasks/common/crypt_mount.yml
  vars:
      cs_crypt_mount_vault_id: "{{ cs_mini0_external_disk_id }}"

- name: Minio | Install | Gather Facts
  ansible.builtin.setup:
      gather_subset: all

- name: Mini0 | Get Config details
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_kv2_get:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: "blr-home-lab/{{ inventory_hostname }}/minio"
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
      engine_mount_point: "secret"
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"
  register: __minio_details

- name: Mini0 | Set config facts
  ansible.builtin.set_fact:
      cs_mini0_mini0_port: "{{ __minio_details.secret.port }}"
      cs_mini0_mini0_console_port: "{{ __minio_details.secret.console_port }}"
      cs_mini0_mini0_region: "{{ __minio_details.secret.region }}"

- name: Minio | Get Public Ingress IP and Hostname from vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_kv2_get:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      engine_mount_point: "secret"
      path: "blr-home-lab"
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
  register: __minio_server_public_ingress_secret_dict
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

- name: Minio | Set fact Public Ingress IP and Hostname
  ansible.builtin.set_fact:
      cs_public_ingress_ip: "{{ __minio_server_public_ingress_secret_dict.secret.public_ingress_ip }}"
      cs_public_ingress_dns_entry: "{{ __minio_server_public_ingress_secret_dict.secret.public_ingress_dns_entry }}"

- name: Minio | Assert | Set cs_mini0_mini0_kes_cluster_name
  ansible.builtin.set_fact:
      cs_mini0_mini0_kes_cluster_name: "{{ cs_mini0_mini0_kes_cluster_name | d(cs_mini0_mini0_cluster_name)
          | mandatory }}"
      cs_mini0_mini0_kes_cluster_node_name: "{{ cs_mini0_mini0_kes_cluster_node_name | d(inventory_hostname)
          | mandatory }}"

- name: Minio | Get KES Admin Key Id from Vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_kv2_get:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      engine_mount_point: "managed-secrets"
      path: "minio-kes/clusters/{{ cs_mini0_kes_cluster_name }}/servers/{{ cs_mini0_mini0_kes_cluster_node_name }}\
          /config"
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
  register: __minio_server_kes_secret_dict
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

- name: Minio | Set cs_mini0_mini0_kes_endpoint
  ansible.builtin.set_fact:
      cs_mini0_mini0_kes_endpoint: "https://{{ __minio_server_kes_secret_dict.secret.ips[0] }}:\
          {{ __minio_server_kes_secret_dict.secret.port }}"

- name: Minio | Assert | cs_mini0_mini0_hostnames
  ansible.builtin.assert:
      that:
          - cs_mini0_mini0_hostnames | type_debug == 'list'
          - cs_mini0_mini0_hostnames | length > 0
      fail_msg: "cs_mini0_mini0_hostnames must be a list with at least one element"

- name: Minio | Assert | cs_mini0_mini0_ips
  ansible.builtin.assert:
      that:
          - cs_mini0_mini0_ips | type_debug == 'list'
          - cs_mini0_mini0_ips | length > 0
      fail_msg: "cs_mini0_mini0_ips must be a list with at least one element"

- name: Minio | Install | Create group
  ansible.builtin.group:
      name: "{{ cs_mini0_mini0_group_name }}"
      state: present
      system: true
  register: minio_server_tmp_group_creation

- name: Minio | Install | Create User
  ansible.builtin.user:
      name: "{{ cs_mini0_mini0_user_name }}"
      group: "{{ cs_mini0_mini0_group_name }}"
      state: present
      create_home: false
      system: true
      shell: /bin/false
  register: minio_server_tmp_user_creation

- name: Minio | Install | Download binary
  ansible.builtin.get_url:
      dest: "/usr/local/bin/minio"
      mode: "0755"
      owner: root
      group: root
      checksum: "sha256:{{ cs_mini0_mini0_bin_info_map[ansible_architecture]['sha256sum'][cs_mini0_mini0_version] }}"
      url: "https://dl.min.io/server/minio/release/linux-\
          {{ cs_mini0_mini0_bin_info_map[ansible_architecture]['cs_mini0_mini0_arch'] }}/archive/minio.\
          {{ cs_mini0_mini0_version }}"

- name: Minio | Install | Create Directories
  ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      owner: "{{ cs_mini0_mini0_user_name }}"
      group: "{{ cs_mini0_mini0_group_name }}"
      mode: "0777"
  loop:
      - "{{ cs_mini0_mini0_certs_dir }}"
      - "{{ cs_mini0_mini0_certs_dir }}/CAs"
      - "{{ cs_mini0_mini0_data_dir }}"
      - "{{ cs_mini0_mini0_kes_cert_dir }}"

- name: Minio | Install | Get Minio Server Certificates from Vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_write:
      timeout: 60
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: pki/issue/server_certificate
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
      data:
          common_name: "{{ inventory_hostname }}"
          alt_names: "{{ cs_mini0_mini0_hostnames | join(',') }}"
          ip_sans: "{{ cs_mini0_mini0_ips | join(',') }}"
  register: minio_server_tmp_certificate
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

- name: Minio | Install | Write Server Certificates
  ansible.builtin.copy:
      content: "{{ item.content }}"
      dest: "{{ item.dest }}"
      owner: "{{ cs_mini0_mini0_user_name }}"
      group: "{{ cs_mini0_mini0_group_name }}"
      mode: "0644"
  loop:
      - content: "{{ minio_server_tmp_certificate.data.data.certificate }}\n\
            {{ minio_server_tmp_certificate.data.data.ca_chain | join('\n') }}\n"
        dest: "{{ cs_mini0_mini0_cert_file }}"
      - content: "{{ minio_server_tmp_certificate.data.data.private_key }}\n"
        dest: "{{ cs_mini0_mini0_private_key }}"
      - content: "{{ minio_server_tmp_certificate.data.data.ca_chain | join('\n') }}\n"
        dest: "{{ cs_mini0_mini0_ca_file }}"

- name: Minio | Install | Write KES Client Admin Certificates
  ansible.builtin.copy:
      content: "{{ item.content }}"
      dest: "{{ item.dest }}"
      owner: "{{ cs_mini0_mini0_user_name }}"
      group: "{{ cs_mini0_mini0_group_name }}"
      mode: "0777"
  loop:
      - content: "{{ __minio_server_kes_secret_dict.secret.admin_cert }}\n"
        dest: "{{ cs_mini0_mini0_kes_admin_cert }}"
      - content: "{{ __minio_server_kes_secret_dict.secret.admin_key }}\n"
        dest: "{{ cs_mini0_mini0_kes_admin_key }}"
      - content: "{{ __minio_server_kes_secret_dict.secret.admin_ca }}\n"
        dest: "{{ cs_mini0_mini0_kes_ca_cert }}"

- name: Minio | Install | Create User and Password
  ansible.builtin.set_fact:
      minio_server_root_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=40,
          chars=['ascii_letters', 'digits']) }}"
      minio_server_root_user: "{{ lookup('community.general.random_string', special=false, length=12) }}"

- name: Minio | Install | Write the Password to Vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_kv2_write:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: "minio/clusters/{{ cs_mini0_mini0_cluster_name }}/servers/{{ inventory_hostname }}/config"
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
      engine_mount_point: "managed-secrets"
      data:
          root_user: "{{ minio_server_root_user }}"
          root_password: "{{ minio_server_root_password }}"
          ips: "{{ cs_mini0_mini0_ips }}"
          hostnames: "{{ cs_mini0_mini0_hostnames }}"
          server_port: "{{ cs_mini0_mini0_port }}"
          console_port: "{{ cs_mini0_mini0_console_port }}"
          server_version: "{{ cs_mini0_mini0_version }}"
          kes:
              cluster_name: "{{ cs_mini0_mini0_kes_cluster_name }}"
              cluster_node_name: "{{ cs_mini0_mini0_kes_cluster_node_name }}"
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

- name: Minio | Install | Create Env File
  ansible.builtin.copy:
      content: |+
          MINIO_KMS_KES_ENDPOINT={{ cs_mini0_mini0_kes_endpoint }}
          MINIO_KMS_KES_KEY_FILE={{ cs_mini0_mini0_kes_admin_key }}
          MINIO_KMS_KES_CERT_FILE={{ cs_mini0_mini0_kes_admin_cert }}
          MINIO_KMS_KES_CAPATH={{ cs_mini0_mini0_kes_ca_cert }}
          MINIO_KMS_KES_KEY_NAME=default
          MINIO_ROOT_USER={{ minio_server_root_user }}
          MINIO_ROOT_PASSWORD={{ minio_server_root_password }}
          MINIO_REGION=us-east-1
          MINIO_VOLUMES={{ cs_mini0_mini0_data_dir }}
          MINIO_OPTS="--address ':{{ cs_mini0_mini0_port }}' --console-address ':{{
            cs_mini0_mini0_console_port }}' --certs-dir {{ cs_mini0_mini0_certs_dir }}"
      dest: "{{ cs_mini0_mini0_env_file }}"
      owner: "{{ cs_mini0_mini0_user_name }}"
      group: "{{ cs_mini0_mini0_group_name }}"
      mode: "0777"

- name: Minio | Install | Enable UFW
  community.general.ufw:
      rule: allow
      port: "{{ item.port }}"
      proto: tcp
      state: enabled
      comment: "Allow Mini0 {{ item.comment }} port, Managed by Ansible home-lab playbook."
  loop:
      - port: "{{ cs_mini0_mini0_port }}"
        comment: "S3"
      - port: "{{ cs_mini0_mini0_console_port }}"
        comment: "Console"

- name: Minio | Install | Create Systemd Service
  ansible.builtin.template:
      src: "templates/minio/{{ cs_mini0_mini0_systemd_service }}.j2"
      dest: "/etc/systemd/system/{{ cs_mini0_mini0_systemd_service }}"
      owner: root
      group: root
      mode: "0644"

- name: Minio | Install | Start Systemd Service
  ansible.builtin.systemd_service:
      name: "{{ cs_mini0_mini0_systemd_service }}"
      state: restarted
      daemon_reload: true
      daemon_reexec: true
      enabled: true
      force: true

- name: Minio | Install | Wait for Minio to start
  ansible.builtin.uri:
      url: "https://localhost:{{ cs_mini0_mini0_port }}/minio/health/live"
      status_code: 200
      timeout: 3
      method: GET
  register: minio_server_health_check
  until: minio_server_health_check.status == 200
  retries: 10
  delay: 1
