---
- name: Database | Redis | Gather Facts
  ansible.builtin.setup:

- name: Database | Redis | Set config facts
  ansible.builtin.set_fact:
      cs_redis_tls_port: "{{ lookup('lab_secrets', 'secret/' + cs_redis_cluster_name + '/'
          + inventory_hostname + '/redis').tls_port }}"
      cs_redis_admin_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=40,
          chars=['ascii_letters', 'digits']) }}"
      cs_redis_tls_privkey_pass: "{{ lookup('ansible.builtin.password', '/dev/null', length=40,
          chars=['ascii_letters', 'digits']) }}"

- name: Database | Redis | Create Database users and passwords in Vault
  become: false
  delegate_to: localhost
  secrets_action:
      key: "managed-secrets/redis/clusters/{{ cs_redis_cluster_name }}/servers/{{ inventory_hostname }}/config"
      action: write
      value:
          tls_port: "{{ cs_redis_tls_port }}"
          admin_password: "{{ cs_redis_admin_password }}"
          ipv4s: "{{ ansible_all_ipv4_addresses }}"
          host: "{{ ansible_host }}"
          hostname: "{{ ansible_hostname }}"
          fqdn: "{{ ansible_fqdn }}"

- name: Database | Redis | Create data directory
  ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      mode: "0755"
  with_items:
      - "{{ cs_redis_dir }}"
      - "{{ cs_redis_data_dir }}"
      - "{{ cs_redis_certs_dir }}"

- name: Database | Redis | Stop old container
  community.docker.docker_container:
      name: "{{ redis_container_name }}"
      state: absent
      force_kill: true

- name: Database | Redis | Write private key
  community.crypto.openssl_privatekey:
      path: "{{ cs_redis_certs_privkey_file }}"
      passphrase: "{{ cs_redis_tls_privkey_pass }}"
      type: RSA
      size: 4096
      backup: false
      mode: "0o644"

- name: Database | Redis | Write CSR
  community.crypto.openssl_csr:
      path: "{{ cs_redis_certs_privkey_file }}.csr"
      privatekey_path: "{{ cs_redis_certs_privkey_file }}"
      privatekey_passphrase: "{{ cs_redis_tls_privkey_pass }}"
      common_name: "{{ ansible_hostname }}"
      basic_constraints: CA:FALSE
      basic_constraints_critical: true
      key_usage:
          - digitalSignature
          - keyEncipherment
      extended_key_usage:
          - serverAuth
      subject_alt_name_critical: true
      backup: false
      mode: "0o644"

- name: Database | Redis | Write Certificate
  community.crypto.x509_certificate:
      path: "{{ cs_redis_certs_cert_file }}"
      csr_path: "{{ cs_redis_certs_privkey_file }}.csr"
      ownca_content: "{{ root_ca_cert_pem }}"
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_password }}"
      provider: ownca
      backup: false
      mode: "0o644"

- name: Database | Redis | Write CA certificate
  ansible.builtin.copy:
      content: "{{ root_ca_cert_pem }}"
      dest: "{{ cs_redis_certs_chain_file }}"
      mode: "0644"

- name: Database | Redis | Start container
  community.docker.docker_container:
      name: "{{ redis_container_name }}"
      image: "{{ redis_docker_image }}:{{ redis_docker_image_tag }}"
      state: started
      restart_policy: unless-stopped
      volumes:
          - "{{ cs_redis_data_dir }}:/data:rw"
          - "{{ cs_redis_certs_privkey_file }}:/server.key:ro"
          - "{{ cs_redis_certs_cert_file }}:/server.crt:ro"
          - "{{ cs_redis_certs_chain_file }}:/ca.crt:ro"
      ports:
          - "{{ cs_redis_tls_port }}:{{ cs_redis_tls_port }}"
      command: redis-server --save 20 1 --loglevel warning
          --requirepass "{{ cs_redis_admin_password }}" --port 0
          --tls-port "{{ cs_redis_tls_port }}" --tls-cert-file /server.crt --tls-auth-clients yes
          --tls-key-file /server.key --tls-ca-cert-file /ca.crt --tls-key-file-pass {{ cs_redis_tls_privkey_pass }}

- name: Database | Redis | Enable UFW port
  community.general.ufw:
      rule: allow
      port: "{{ cs_redis_tls_port }}"
      state: enabled
      proto: tcp
      comment: "Allow Redis port, Managed by Ansible home-lab playbook."

- name: Database | Redis | Test | Install Redis Tools
  ansible.builtin.apt:
      name: redis-tools
      state: present
      install_recommends: true

- name: Database | Redis | Test | Create Client Certificates temp files
  ansible.builtin.tempfile:
      state: file
  register: __temp_file_client_cert
  with_items:
      - "key"
      - "cert"
      - "ca_chain"

- name: Database | Redis | Test | Write private key
  community.crypto.openssl_privatekey:
      path: "{{ __temp_file_client_cert.results[0].path }}"
      type: RSA
      size: 4096
      backup: false
      mode: "0o600"

- name: Database | Redis | Test | Write CSR
  community.crypto.openssl_csr:
      path: "{{ __temp_file_client_cert.results[0].path }}.csr"
      privatekey_path: "{{ __temp_file_client_cert.results[0].path }}"
      common_name: "{{ ansible_hostname }}"
      basic_constraints: CA:FALSE
      basic_constraints_critical: true
      key_usage:
          - digitalSignature
          - keyEncipherment
      extended_key_usage:
          - clientAuth
      subject_alt_name_critical: true
      backup: false
      mode: "0o600"

- name: Database | Redis | Test | Write Certificate
  community.crypto.x509_certificate:
      path: "{{ __temp_file_client_cert.results[1].path }}"
      csr_path: "{{ __temp_file_client_cert.results[0].path }}.csr"
      ownca_content: "{{ root_ca_cert_pem }}"
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_password }}"
      provider: ownca
      backup: false
      mode: "0o600"

- name: Database | Redis | Test | Write CA certificate
  ansible.builtin.copy:
      content: "{{ root_ca_cert_pem }}"
      dest: "{{ __temp_file_client_cert.results[2].path }}"
      mode: "0644"

- name: Database | Redis | Test | Wait for service to start
  ansible.builtin.command:
      cmd: "redis-cli -a {{ cs_redis_admin_password }} -p {{ cs_redis_tls_port }} --no-auth-warning
          --tls --cert {{ __temp_file_client_cert.results[1].path }}
          --key {{ __temp_file_client_cert.results[0].path }}
          --cacert {{ __temp_file_client_cert.results[2].path }} ping"
  changed_when: false
  timeout: 3
  register: redis_ping
  retries: 30
  delay: 5
  until: redis_ping.stdout is defined and redis_ping.stdout == "PONG"

- name: Database | Redis | Test | Remove temporary certificates
  ansible.builtin.file:
      path: "{{ item.path }}"
      state: absent
  with_items: "{{ __temp_file_client_cert.results }}"
